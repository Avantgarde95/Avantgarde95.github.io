1:"$Sreact.fragment"
2:I[7628,["177","static/chunks/app/layout-5d369154124a380d.js"],""]
3:I[9888,[],""]
4:I[9750,[],""]
6:I[977,[],"OutletBoundary"]
8:I[977,[],"MetadataBoundary"]
a:I[977,[],"ViewportBoundary"]
c:I[9375,[],""]
:HL["/_next/static/css/f81b53168bed0ade.css","style"]
0:{"P":null,"b":"WT6E7p9ps4KAIxOB6LGiN","p":"","c":["","en","blog","post","nextmismatch"],"i":false,"f":[[["",{"children":[["locale","en","d"],{"children":["blog",{"children":["post",{"children":[["key","nextmismatch","d"],{"children":["__PAGE__",{}]}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f81b53168bed0ade.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","className":"m-0 h-full w-full p-0 font-sans","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","as":"style","crossOrigin":"","href":"https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard-dynamic-subset.min.css"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":""}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&display=swap","rel":"stylesheet"}]]}],["$","body",null,{"className":"m-0 h-full w-full p-0","children":[["$","$L2",null,{"color":"#d6d6d6","showSpinner":false,"shadow":false}],["$","div",null,{"className":"flex h-full w-full flex-col items-center overflow-y-auto bg-background pt-16 text-primary","children":[["$","div",null,{"className":"w-full max-w-screen-lg px-6","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","div",null,{"className":"h-32 w-full shrink-0"}]]}]]}]]}]]}],{"children":[["locale","en","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$0:f:0:1:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$0:f:0:1:2:children:0","children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["post",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$0:f:0:1:2:children:0","children","blog","children","post","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["key","nextmismatch","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$0:f:0:1:2:children:0","children","blog","children","post","children","$0:f:0:1:2:children:2:children:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","sM3wj-6BjreTAiycRcHTt",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[1357,["899","static/chunks/66a21e36-9320fd4f2767de8c.js","79","static/chunks/79-121b1482e66f2415.js","568","static/chunks/568-94d199cce9c2ce6e.js","253","static/chunks/app/%5Blocale%5D/blog/post/%5Bkey%5D/page-39ba752fa4b62049.js"],"default"]
e:I[149,["899","static/chunks/66a21e36-9320fd4f2767de8c.js","79","static/chunks/79-121b1482e66f2415.js","568","static/chunks/568-94d199cce9c2ce6e.js","253","static/chunks/app/%5Blocale%5D/blog/post/%5Bkey%5D/page-39ba752fa4b62049.js"],"default"]
10:I[6879,["899","static/chunks/66a21e36-9320fd4f2767de8c.js","79","static/chunks/79-121b1482e66f2415.js","568","static/chunks/568-94d199cce9c2ce6e.js","253","static/chunks/app/%5Blocale%5D/blog/post/%5Bkey%5D/page-39ba752fa4b62049.js"],"default"]
f:T1df5,이 웹사이트를 실행했을 때, 작동은 잘 되는 것 같은데 콘솔에 아래와 같은 에러 메시지들이 뜨는 문제가 있었다.

When I run this website, it seems to work fine, but I got following error messages appearing on the console.

```text
Uncaught Error: Minified React error #425; visit https://reactjs.org/docs/error-decoder.html?invariant=425 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.

Uncaught Error: Minified React error #418; visit https://reactjs.org/docs/error-decoder.html?invariant=418 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.

Uncaught Error: Minified React error #423; visit https://reactjs.org/docs/error-decoder.html?invariant=423 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.
```

위 에러 메시지들에 나온 링크를 방문해보면 아래와 같은 메시지들이 나온다.

If you visit the links in these error messages, you will see the following messages.

- Text content does not match server-rendered HTML.
- Hydration failed because the initial UI does not match what was rendered on the server.
- There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.

이 웹사이트는 Next.js로 정적 사이트 생성(SSG - Static Site Generation)을 하여 만들었다.
Next.js로 미리 생성한 HTML을 일단 유저에게 보여주고, 그 후에 React로 hydration & CSR(Client-side Rendering)을 하는 방식이다.
따라서, 위의 메시지들은 미리 렌더링한 HTML과 클라이언트에서 렌더링한 HTML 간에 내용물이 불일치한다는 것을 의미한다.
이 문제는 SSR 뿐만 아니라 SSR 상황에서도 동일하게 발생한다.

I created this website by using SSG (Static Site Generation) with Next.js
It works by showing the pre-generated HTML to the user first, and performing hydration & CSR (Client-side Rendering) with React.
Therefore, the above messages mean that there is a content mismatch between the pre-rendered HTML and the client-rendered HTML.
This problem can occur not only SSG but also SSR, too.

원인은 두 곳에 있었다.
하나는 페이지 상단의 시계 UI이다.

There were two reasons.
One is the clock UI at the top of the page.

```typescript
import { useEffect, useState } from "react";

export default function useNow() {
  const [now, setNow] = useState(new Date());

  useEffect(() => {
    const interval = setInterval(() => {
      setNow(new Date());
    }, 1000 * 10);

    return () => {
      clearInterval(interval);
    };
  }, []);

  return {
    year: now.getFullYear(),
    month: now.getMonth() + 1,
    monthDay: now.getDate(),
    hour: now.getHours(),
    minute: now.getMinutes(),
    second: now.getSeconds(),
  };
}
```

시계 기능을 구현하기 위해 위와 같은 custom hook을 작성했었다.
그런데 `const [now, setNow] = useState(new Date());`에서 `new Date()`의 값은 서버 렌더링 시와, 클라이언트 렌더링 시에 **서로 다르다**.
이로 인하여 시계 텍스트가 두 상황에서 불일치하여 에러가 났던 것이다.
CSR 전까지는 실제 시간을 사용하지 않고 더미 값을 쓰도록 하여 해결하였다.

I wrote the above custom hook to implement the clock.
However, in `const [now, setNow] = useState(new Date());`, the value of `new Date()` is **different** between server rendering and client rendering.
This inconsistency of the clock text caused the error.
I solved this problem by using a dummy value until we perform CSR.

다만 이러면 초반에 시간이 더미 값으로 떠서 이상해 보이는 문제가 있다.
적절한 로딩 UI를 부여하면 좀 낫지 않을까 한다.

However, we get a problem that the user sees a dummy value at the beginning.
We may fix that problem by using appropriate loading UI.

```typescript
import { useEffect, useState } from "react";

interface Time {
  year: number;
  month: number;
  monthDay: number;
  hour: number;
  minute: number;
  second: number;
}

export default function useNow(): Time {
  // If we use new Date() at here, server HTML and client HTML won't match.
  // So we don't compute date before useEffect().
  const [now, setNow] = useState<Date | null>(null);

  useEffect(() => {
    setNow(new Date());

    const interval = setInterval(() => {
      setNow(new Date());
    }, 1000 * 10);

    return () => {
      clearInterval(interval);
    };
  }, []);

  return now === null
    ? {
        year: 0,
        month: 0,
        monthDay: 0,
        hour: 0,
        minute: 0,
        second: 0,
      }
    : {
        year: now.getFullYear(),
        month: now.getMonth() + 1,
        monthDay: now.getDate(),
        hour: now.getHours(),
        minute: now.getMinutes(),
        second: now.getSeconds(),
      };
}
```

다른 하나는 이 글처럼 코드를 렌더링 할 때 쓰는 react-syntax-highlighter 라이브러리이다.
해당 라이브러리는 내부적으로 [Prism.js](https://prismjs.com/)(또는 [highlight.js](https://highlightjs.org/))를 호출한다.
이들은 코드를 읽고 **DOM을 변경**하여 코드 하이라이팅을 한다.
이것이 mismatch를 만들어낸 것으로 추정한다.

이와 같은 상황에서 특정 동작을 클라이언트에서만 하도록 하고 싶으면, `useEffect()`를 활용할 수 있다.
`useEffect()` 안의 코드는 항상 **클라이언트에서만 실행**된다.
`useEffect()`가 처음 불리는 시점은 컴포넌트가 마운트된 이후, 즉 DOM이 생성된 이후이기 때문이다.

The other is the react-syntax-highlighter library used when rendering code like this article.
The library calls [Prism.js](https://prismjs.com/) (or [highlight.js](https://highlightjs.org/)) internally.
They read the code and **change the DOM** to highlight the code.
It seems that that behavior created mismatches.

In such a situation, if you want to make certain actions executed only for the client, you can use `useEffect()`.
Code in `useEffect()` is always executed **only on the client**.
This is because the first time `useEffect()` is called is after the component is mounted i.e after the DOM is created.

우선 아래와 같은 custom hook을 하나 만들었다.
`isClient`는 클라이언트에서만 true이 된다.

I created the following custom hook first.
`isClient` can be true only on the client.

```typescript
import { useEffect, useState } from "react";

export default function useClient() {
  const [isClient, setClient] = useState(false);

  useEffect(() => {
    setClient(true);
  }, []);

  return { isClient };
}
```

이를 이용하여, 아래와 같이 CSR 전까지는 react-syntax-highlighter를 적용하지 않도록 하여 에러를 해결하였다.
(가독성을 위해 일부 props는 생략하였다.)

Using this, I solved the errors by preventing the component from applying react-syntax-highlighter before starting CSR.
(I omitted some props for readability.)

```tsx
import { PrismLight as SyntaxHighlighter } from "react-syntax-highlighter";

...

const PostView = () => (
  <ReactMarkdown
    components={{
      code: MarkdownCode,
      a: MarkdownLink,
      img: MarkdownImage,
    }}
  >
    ...
  </ReactMarkdown>
);

...

const MarkdownCode = () => {
  const { isClient } = useClient();

  ...

  return isClient && ... ? (
    <SyntaxHighlighter>
      ...
    </SyntaxHighlighter>
  ) : (
    <InlineCode>
      ...
    </InlineCode>
  );
};
```
5:["$","div",null,{"className":"w-full","children":[["$","header",null,{"className":"mb-4 flex w-full flex-row items-center","children":[["$","h1",null,{"className":"m-0 mr-auto p-0 font-mono text-3xl font-normal md:text-4xl","children":"Blog"}],["$","$Ld",null,{}]]}],["$","div",null,{"className":"mb-4 w-full border-b-2 border-dashed border-gray pb-4","children":[["$","h2",null,{"className":"m-0 p-0 text-xl","children":"Server & client mismatch problem in Next.js"}],["$","div",null,{"className":"text-gray","children":"2022-09-21"}]]}],["$","$Le",null,{"post":{"key":"nextmismatch","title":"Server & client mismatch problem in Next.js","time":1663718400000,"category":"Computer","content":"$f"}}],["$","div",null,{"className":"my-4 w-full border-b-2 border-dashed border-gray"}],["$","$L10",null,{"shortname":"Avantgarde95","config":{"url":"https://avantgarde95.github.io/blog/nextmismatch","identifier":"Server & client mismatch problem in Next.js","title":"Server & client mismatch problem in Next.js"}}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Server & client mismatch problem in Next.js"}]]
7:null
