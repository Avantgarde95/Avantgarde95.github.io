"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[33],{9556:function(n,e,t){var r=t(3723),o=t(9953),s=t(618),i=t.n(s);let a=(0,o.forwardRef)((n,e)=>{let{href:t="/",children:o,...s}=n;return(0,r.tZ)(i(),{ref:e,href:t,...!t.startsWith("/")&&{target:"_blank",rel:"noreferrer noopener"},...s,children:o})});a.displayName="NextLink",e.Z=a},4811:function(n,e,t){t.d(e,{b:function(){return o}});var r=t(8797);let o=(0,r.cn)({key:"language",default:"Korean"})},1728:function(n,e,t){t.d(e,{ED:function(){return l},GX:function(){return i},Ji:function(){return u},Ph:function(){return s},Y3:function(){return a},Y9:function(){return c},ih:function(){return p},kr:function(){return h},oW:function(){return o}});var r=t(986);let o="(min-width: 768px)",s=(0,r.iv)("\r\n  cursor:pointer;box-sizing:border-box;border:0;padding:0;color:inherit;background-color:transparent;font-family:inherit;font-size:inherit;"),i=(0,r.iv)("\r\n  text-decoration:none;color:inherit;font-family:inherit;font-size:inherit;"),a=(0,r.iv)("\r\n  margin:0;padding:0;"),l=(0,r.iv)("\r\n  display:flex;flex-direction:row;justify-content:center;align-items:center;"),c=(0,r.iv)("\r\n  box-shadow:0px 1px 5px rgba(129,129,129,0.25);"),u={startStyle:"opacity: 0",endStyle:"opacity: 1"},h={startStyle:"transform: scale(0.5)",endStyle:"transform: scale(1)"},p=function(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"1s",t=(0,r.F4)("\r\n    100%{",n.map(n=>n.endStyle+";").join("\n"),"}"),o=(0,r.iv)("\r\n    ",n.map(n=>n.startStyle+";").join("\n"),"\r\n    animation:",t," ",e," forwards;");return{style:o,keyframes:t}}},3399:function(n,e,t){function r(n){return function(n){let e=n.getFullYear(),t=n.getMonth()+1,r=n.getDate();return"".concat("".concat(e).padStart(4,"0"),"-").concat("".concat(t).padStart(2,"0"),"-").concat("".concat(r).padStart(2,"0"))}(new Date(n))}function o(n){let e=n.match(/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/);return e&&11===e[7].length?e[7]:null}t.d(e,{gx:function(){return o},mr:function(){return r}})},3408:function(n,e,t){t.d(e,{Z:function(){return S}});var r=t(3723),o=t(8797),s=t(7549);let i=["Computer","Music","Misc"];new Date("2022-09-21").getTime(),t(516),new Date("2022-09-19").getTime(),t(7935),new Date("2022-09-08").getTime(),t(9289),new Date("2022-03-31").getTime(),t(146),new Date("2022-02-05").getTime(),t(5930),new Date("2022-01-28").getTime(),t(1026),new Date("2022-01-22").getTime(),t(3754),new Date("2022-01-22").getTime(),t(8776),new Date("2022-01-22").getTime(),t(3751),new Date("2021-10-19").getTime(),t(6223),new Date("2021-10-19").getTime(),t(8999),new Date("2021-06-10").getTime(),t(4925),new Date("2021-05-01").getTime(),t(5951),new Date("2021-04-14").getTime(),t(9758),new Date("2021-04-12").getTime(),t(8234),new Date("2021-01-18").getTime(),t(663),new Date("2020-12-29").getTime(),t(828),new Date("2020-12-29").getTime(),t(9725),new Date("2020-12-29").getTime(),t(4721),new Date("2020-12-28").getTime(),t(7833),new Date("2020-10-11").getTime(),t(2772),new Date("2020-10-11").getTime(),t(6251),new Date("2020-10-03").getTime(),t(3009),new Date("2020-09-21").getTime(),t(8862);var a=t(3399),l=t(9556),c=t(4811),u=t(1728);let h=n=>{let{previews:e}=n;return(0,r.BX)(p,{children:[(0,r.BX)(g,{children:[(0,r.tZ)(w,{href:"/blog",children:"All"}),i.map(n=>(0,r.tZ)(w,{href:"/blog/category/".concat(n.toLowerCase()),children:n},n))]}),(0,r.tZ)(d,{children:e.map(n=>(0,r.BX)(y,{children:[(0,r.tZ)(b,{href:"/blog/post/".concat(n.key),children:n.title}),(0,r.tZ)(v,{children:(0,a.mr)(n.time)}),(0,r.tZ)(x,{dangerouslySetInnerHTML:{__html:n.content}}),(0,r.BX)(k,{children:[(0,r.tZ)(f,{}),(0,r.tZ)(C,{href:"/blog/category/".concat(n.category.toLowerCase()),children:n.category})]})]},n.key))})]})},p=(0,s.Z)("div",{target:"e8ysgxi0"})("\r\n  display:flex;flex-direction:column;align-items:center;width:100%;height:100%;"),d=(0,s.Z)("div",{target:"e8ysgxi1"})("\r\n  overflow-y:auto;box-sizing:border-box;width:100%;flex:1;padding:0 21px;"),m=(0,u.ih)([u.Ji],"0.8s"),g=(0,s.Z)("div",{target:"e8ysgxi2"})("\r\n  ",m.style,"\r\n\r\n  text-align:center;width:100%;margin-bottom:30px;font-size:17px;font-weight:400;color:",n=>{let{theme:e}=n;return e.color.blue},";"),f=()=>{let n=(0,o.sJ)(c.b);return(0,r.BX)(r.HY,{children:["Korean"===n?"카테고리":"Category",":\xa0"]})},w=(0,s.Z)(l.Z,{target:"e8ysgxi3"})("\r\n  ",u.GX,"\r\n\r\n  &:not(:first-of-type){margin-left:16px;}"),y=(0,s.Z)("div",{target:"e8ysgxi4"})("\r\n  box-sizing:border-box;width:100%;padding:16px 0;border-bottom:1px solid ",n=>{let{theme:e}=n;return e.color.gray2},";&:first-of-type{padding-top:0;}"),b=(0,s.Z)(l.Z,{target:"e8ysgxi5"})("\r\n  ",u.GX,"\r\n\r\n  display:block;margin-bottom:2px;font-size:20px;font-weight:bold;color:",n=>{let{theme:e}=n;return e.color.blue},";"),v=(0,s.Z)("div",{target:"e8ysgxi6"})("\r\n  margin-bottom:8px;font-size:16px;"),x=(0,s.Z)("div",{target:"e8ysgxi7"})("\r\n  word-break:break-all;margin-bottom:8px;font-size:16px;"),k=(0,s.Z)("div",{target:"e8ysgxi8"})("\r\n  font-size:16px;"),C=(0,s.Z)(l.Z,{target:"e8ysgxi9"})("\r\n  ",u.GX,"\r\n\r\n  color:",n=>{let{theme:e}=n;return e.color.blue},";");var S=h},5829:function(n,e,t){t.d(e,{Z:function(){return Q}});var r,o,s,i,a,l,c=t(3723),u=t(8797),h=t(7549),p=t(4811),d=t(986),m=t(9953),g=t(1728);function f(){return(f=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}var w=function(n){return m.createElement("svg",f({width:17,height:17,fill:"none",xmlns:"http://www.w3.org/2000/svg"},n),r||(r=m.createElement("path",{opacity:.1,d:"M8.5 1.417c-3.4 0-6.375 1.487-8.5 3.825l8.5 10.341L17 5.242c-2.125-2.338-5.1-3.825-8.5-3.825Z",fill:"#1F1F1F"})))};function y(){return(y=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}var b=function(n){return m.createElement("svg",y({width:17,height:17,fill:"none",xmlns:"http://www.w3.org/2000/svg"},n),o||(o=m.createElement("path",{d:"M15.583 1.417 1.417 15.583h14.166V1.417Z",fill:"#1F1F1F"})))};function v(){return(v=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}var x=function(n){return m.createElement("svg",v({width:8,height:15,fill:"none",xmlns:"http://www.w3.org/2000/svg"},n),s||(s=m.createElement("path",{d:"M5.5 0h-3v1.5H1c-.552 0-1 .504-1 1.125v11.25C0 14.496.448 15 1 15h6c.552 0 1-.504 1-1.125V2.625C8 2.004 7.552 1.5 7 1.5H5.5V0Z",fill:"#1F1F1F",fillOpacity:.3})),i||(i=m.createElement("path",{d:"M0 8v5.95C0 14.53.448 15 1 15h6c.552 0 1-.47 1-1.05V8H0Z",fill:"#1F1F1F"})))};let k=()=>(0,c.BX)(C,{children:[(0,c.tZ)(S,{}),(0,c.tZ)(A,{css:j,children:(0,c.tZ)(w,{})}),(0,c.tZ)(A,{children:(0,c.tZ)(b,{})}),(0,c.tZ)(A,{children:(0,c.tZ)(x,{})})]}),C=(0,h.Z)("div",{target:"e1dz70rv0"})("\r\n  box-sizing:border-box;display:flex;flex-direction:row;width:100%;padding:22px 24px 10px 24px;"),S=()=>{let{hour:n,minute:e}=function(){let[n,e]=(0,m.useState)(null);return(0,m.useEffect)(()=>{e(new Date);let n=setInterval(()=>{e(new Date)},1e4);return()=>{clearInterval(n)}},[]),null===n?{year:0,month:0,monthDay:0,hour:0,minute:0,second:0}:{year:n.getFullYear(),month:n.getMonth()+1,monthDay:n.getDate(),hour:n.getHours(),minute:n.getMinutes(),second:n.getSeconds()}}();return(0,c.BX)("div",{css:(0,d.iv)("\r\n        font-size:14px;font-weight:500;"),children:["".concat(n).padStart(2,"0"),":","".concat(e).padStart(2,"0")]})},j=(0,d.iv)("\r\n  margin-left:auto;"),A=(0,h.Z)("div",{target:"e1dz70rv1"})("\r\n  ",g.ED,"\r\n\r\n  width:17px;height:17px;");var R=t(915),I=t(6136),B=t(1649),T=t(6581),D=t(9556);function M(){return(M=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}var G=function(n){return m.createElement("svg",M({width:28,height:28,fill:"none",xmlns:"http://www.w3.org/2000/svg"},n),a||(a=m.createElement("path",{d:"M21 7 7 21M7 7l14 14",stroke:"#1F1F1F",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"})))};let E=n=>{let{show:e,setShow:t}=n,r=(0,I.u)(),{isWide:o}=function(){let n=(0,T.Z)("(min-width: 1000px)");return{isWide:n}}(),s=n=>{n.stopPropagation()},i=()=>{t(!1)};return(0,c.BX)(B.ZP,{PaperProps:{sx:{width:"284px",backgroundColor:r.color.white},onClick:s},anchor:"left",open:e,onClick:i,hideBackdrop:o,children:[(0,c.tZ)(O,{children:(0,c.tZ)(H,{onClick:i,children:(0,c.tZ)(G,{})})}),(0,c.tZ)(L,{href:"/",children:"Home"}),(0,c.tZ)(L,{href:"https://avant-resume.vercel.app/",children:"Resume"}),(0,c.tZ)(L,{href:"/projects",children:"Projects"}),(0,c.tZ)(L,{href:"/musics",children:"Musics"}),(0,c.tZ)(L,{href:"/art",children:"Art"}),(0,c.tZ)(L,{href:"/blog",children:"Blog"}),(0,c.tZ)(L,{href:"https://github.com/Avantgarde95",children:"GitHub"})]})},O=(0,h.Z)("div",{target:"e1tib4zq0"})("display:flex;flex-direction:row;margin-top:52px;margin-bottom:24px;"),H=(0,h.Z)("button",{target:"e1tib4zq1"})(g.Ph,"  margin-left:auto;margin-right:14px;"),L=n=>{let e=(0,I.u)();return(0,c.tZ)(R.Z,{css:(0,d.iv)(g.GX,"        text-transform:none;overflow-x:hidden;white-space:nowrap;box-sizing:border-box;display:block;width:100%;height:44px;min-width:0;min-height:0;padding:0;padding-top:14px;padding-left:24px;font-size:19px;font-weight:700;line-height:normal;letter-spacing:normal;border-radius:0;border-bottom:0.5px solid ",e.color.black,";"),LinkComponent:D.Z,...n})};function P(){return(P=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}var U=function(n){return m.createElement("svg",P({width:24,height:24,fill:"none",xmlns:"http://www.w3.org/2000/svg"},n),l||(l=m.createElement("path",{d:"M3 18h18M3 12h18M3 6h18",stroke:"#1F1F1F",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"})))};let N=n=>{let{title:e}=n;return(0,c.BX)(Z,{children:[(0,c.tZ)(J,{}),(0,c.tZ)(F,{children:e.toUpperCase()}),(0,c.tZ)(Y,{})]})},Z=(0,h.Z)("header",{target:"ecceavf0"})("box-sizing:border-box;display:flex;flex-direction:row;width:100%;padding:18px 20px;"),W=(0,g.ih)([g.Ji],"0.5s"),F=(0,h.Z)("h1",{target:"ecceavf1"})(g.Y3,"  text-align:center;flex:1;font-size:21px;font-weight:700;",W.style),J=()=>{let[n,e]=(0,m.useState)(!1),t=()=>{e(!0)};return(0,c.BX)(c.HY,{children:[(0,c.tZ)(R.Z,{css:(0,d.iv)(g.Ph," ",X,"          min-width:0;min-height:0;margin-right:auto;"),onClick:t,children:(0,c.tZ)(U,{})}),(0,c.tZ)(E,{show:n,setShow:e})]})},X=(0,d.iv)("width:24px;height:24px;"),Y=()=>{let[n,e]=(0,u.FV)(p.b),t=()=>{e(n=>"Korean"===n?"English":"Korean")};return(0,c.tZ)(c.HY,{children:(0,c.BX)(R.Z,{css:(0,d.iv)(g.Ph," ",X,"          display:flex;flex-direction:row;align-items:flex-end;min-width:0;min-height:0;margin-left:auto;"),onClick:t,children:[(0,c.tZ)("span",{css:(0,d.iv)(z("Korean"===n)),children:"가"}),(0,c.tZ)("span",{css:(0,d.iv)(z("English"===n)),children:"A"})]})})},z=n=>(0,d.iv)("font-size:",n?"21px":"12px",";line-height:",n?"21px":"12px",";opacity:",n?1:.5,";transition:opacity 1s,font-size 0.3s,line-height 0.3s;"),_=n=>{let{title:e,children:t}=n,r=(0,u.sJ)(p.b);return(0,c.tZ)(V,{children:(0,c.BX)(q,{children:[(0,c.tZ)(k,{}),(0,c.tZ)(N,{title:e[r]}),(0,c.tZ)(K,{children:t})]})})},V=(0,h.Z)("div",{target:"e12ob6f70"})("\r\n  display:flex;flex-direction:row;justify-content:center;width:100%;height:100%;color:",n=>{let{theme:e}=n;return e.color.black},";background-color:",n=>{let{theme:e}=n;return e.color.white},";"),q=(0,h.Z)("div",{target:"e12ob6f71"})("\r\n  display:flex;flex-direction:column;width:100%;max-width:1000px;"),K=(0,h.Z)("main",{target:"e12ob6f72"})("\r\n  overflow-y:auto;width:100%;flex:1;");var Q=_},4925:function(n){n.exports="C++에서 **CRTP**(묘하게 되풀이되는 템플릿 패턴, Curiously Recurring Template Pattern)라는 재미있는 트릭이 있다.\n부모 클래스를 템플릿 클래스로 만들고 자식 클래스가 자기 자신을 템플릿 인수로 넣어 부모 클래스에서 자식 클래스를 사용할 수 있게 하는 트릭이다.\n\nThere's a fun trick in C++ called CRTP (Curiously Recurring Template Pattern).\nThe trick is to enable the parent class to use the child class by making the parent class a template class and let the child class to pass itself as a template argument.\n\n```cpp\ntemplate <typename Derived>\nclass MyBase {\n    ...\n};\n\nclass MyDerived: public MyBase<Derived> {\n    ...\n};\n```\n\n이 트릭을 이용하면 아래와 같이 싱글톤 베이스 클래스를 제작할 수 있다.\n자식 클래스에서 `getInstance()`를 굳이 만들 필요 없이 싱글톤 베이스 클래스를 상속받고 생성자만 구현해주면 된다.\n개인적으로 안정성이 중요한 프로그램들에서 싱글톤들의 라이프사이클을 일괄적으로 관리하고 싶을때 매우 유용하지 않을까 생각한다.\n\nUsing this trick, you can create a singleton base class like below.\nThe child class doesn't have to create its own `getInstance()`. I just need to inherit the singleton base class and implement its constructor.\nPersonally, I think it would be very useful when you want to manage the lifecycle of singletons in the programs where stability is important.\n\n```cpp\ntemplate <typename Derived>\nclass Singleton {\npublic:\n    static const Derived* getInstance() {\n        if (m_instance == nullptr) {\n            // Call the constructor of the child class (by using CRTP).\n            m_instance = new Derived();\n        }\n\n        return m_instance;\n    }\n\nprivate:\n    static Derived* m_instance;\n};\n\ntemplate <typename Derived>\nDerived* Singleton<Derived>::m_instance = nullptr;\n\nclass Manager : public Singleton<Manager> {\npublic:\n    Manager() {\n        m_status = \"Manager is created!\";\n    }\n\npublic:\n    const std::string& getStatus() const {\n        return m_status;\n    }\n\nprivate:\n    std::string m_status;\n};\n```\n"},8776:function(n){n.exports="고전적인 CSS 트릭 한 가지를 소개하고자 한다.\n\nCSS border를 이용하면 삼각형을 그릴 수 있다.\n이를 박스에 붙여서 아래 이미지와 같이 말풍선 모양을 만들수도 있고,\n[링크](https://codesandbox.io/s/simple-christmas-tree-c6jjj)와 같이 크리스마스 트리를 만들수도 있다.\n\nI'd like to introduce you to one classic CSS trick.\n\nYou can draw a triangle using CSS border.\nYou can attach it to the box to make a speech bubble like the image below,\nyou can also make a Christmas tree like [link](https://codesandbox.io/s/simple-christmas-tree-c6jjj).\n\n![SpeechBubbleExample](https://imgur.com/xwSCif7.png)\n\n원리는 간단하다. Border들이 모두 양수 width를 가지고 있으면, border들은 사다리꼴 모양이 된다.\n\nThe principle is simple. If all borders have positive widths, the borders become trapezoidal.\n\n![Borders](https://imgur.com/I4WiilA.png)\n\n위 사진에서 A 부분의 크기를 0으로 하고 border B1 ~ B4 중 원하는 것을 빼고 투명화시켜주면 삼각형 하나만 남게 된다.\n[데모 링크](https://codesandbox.io/s/css-border-triangle-7unfo?file=/css/style.css)\n\nSet the size of A to 0 and make the borders B1 ~ B4 transparent except the border you want, then a triangle will be left.\n[Demo link](https://codesandbox.io/s/css-border-triangle-7unfo?file=/css/style.css)\n"},9289:function(n){n.exports='[styled-components](https://styled-components.com/), [Emotion](https://emotion.sh/) 등의 CSS-in-JS 라이브러리에서는 `styled`, `css` 등의 API를 제공하여 컴포넌트에 스타일을 입힐 수 있도록 한다.\r\n\r\nCSS-in-JS libraries such as [styled-components](https://styled-components.com/), [Emotion](https://emotion.sh/) provides APIs such as `styled`, `css` to style the components.\r\n\r\n```tsx\r\n// ex. styled-components, Emotion.\r\nconst MyButton = styled.button`\r\n  color: blue;\r\n`;\r\n\r\n// ex. Emotion.\r\nconst MyBox = () => (\r\n  <div\r\n    css={css`\r\n      color: red;\r\n    `}\r\n  >\r\n    Hello!\r\n  </div>\r\n);\r\n```\r\n\r\n우리가 만든 컴포넌트를 이 API들을 사용하여 스타일링할 수 있도록 하려면 어떻게 해야 할까?\r\n이 API들은 일반적으로 아래와 같이 작동한다.\r\n\r\n- className을 생성한다.\r\n- 페이지에 CSS 코드를 삽입한다.\r\n  - `<style>` 태그 안에 코드를 넣기, [CSSStyleSheet](https://developer.mozilla.org/ko/docs/Web/API/CSSStyleSheet)로 코드 넣기 등 여러 가지 방식이 있다.\r\n- 컴포넌트에 해당 className을 설정한다.\r\n\r\nHow can we make our component styleable using these APIs?\r\nThese APIs generally work like the following:\r\n\r\n- Create a className\r\n- Inject CSS code into the page\r\n  - There are several methods, such as putting the code inside `<style>` tag, registering the code using [CSSStyleSheet](https://developer.mozilla.org/en/docs/Web/API/CSSStyleSheet), etc.\r\n- Set className of the component\r\n\r\n![How CSS-in-JS libraries work](/image/css-in-js-work.png)\r\n\r\n따라서, 우리는 그냥 `className` props를 제공하면 된다.\r\n\r\nTherefore, we just need to provide `className` props.\r\n\r\n```tsx\r\ninterface ButtonProps {\r\n  className?: string;\r\n  label: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst Button = ({ className, label, onClick }) => (\r\n  <button className={className} onClick={onClick}>\r\n    {label}\r\n  </button>\r\n);\r\n```\r\n\r\n```tsx\r\nimport Button from "...";\r\n\r\nconst SubmitButton = styled(Button)`\r\n  color: red;\r\n`;\r\n\r\nconst CancelButton = () => (\r\n  <Button\r\n    css={css`\r\n      color: blue;\r\n    `}\r\n    ...\r\n  />\r\n);\r\n```\r\n'},7833:function(n){n.exports="<https://youtu.be/GVYPQNi6yZ8>\n\nLink: <https://avantgarde95.github.io/asciisnow/?image=christmas>\n\nCode: <https://github.com/Avantgarde95/asciisnow>\n"},8999:function(n){n.exports="[Webpack](https://webpack.js.org/) 등의 번들러를 이용하여 프론트엔드 코드를 작성할 때,\nurl-loader, file-loader, [@svgr/webpack](https://react-svgr.com/docs/webpack/), Webpack 5의 [asset modules](https://webpack.js.org/guides/asset-modules/) 등의 기능들을 이용하여 아래와 같이 이미지를 마치 JavaScript/TypeScript처럼 import하는 코드를 작성할 수 있다.\n\nWhen writing front-end code using a bundler, you can write code that imports images like JavaScript/TypeScript using the functions such as [Webpack](https://webpack.js.org/),\nurl-loader, file-loader, [@svgr/webpack](https://react-svgr.com/docs/webpack/), and [asset modules](https://webpack.js.org/guides) in Webpack 5.\n\n```typescript\nimport Apple from 'image/Apple.png';\n\nconst MyImage = () => <img src={Apple}/>;\n```\n\n[Jest](https://jestjs.io/)를 사용하여 프론트엔드 코드의 단위 테스트를 작성하고 실행할 때, 이들을 처리하지 못하여 오류가 나는 경우가 있다.\n이는 Jest가 Webpack 세팅과는 별개의 환경에서 동작하기 때문이다.\n\n간단한 해결방법 중 하나는, 아래와 같이 해당 파일들을 더미값으로 바꿔주는 [custom transformer](https://jestjs.io/docs/next/code-transformation)를 작성해주는 것이다.\n예컨대, png, jpg 등의 리소스들을 더미 URL로 바꾸고자 한다면, 아래와 같이 transformer를 하나 제작해주고 Jest config에서 해당 transformer를 매핑해주면 된다.\n\nWhen writing and executing unit tests of front-end code using [Jest](https://jestjs.io/), there are cases where an error occurs while processing those resources.\nThis is because Jest operates in a separate environment from Webpack settings.\n\nOne of the simple solutions is to write a [custom transformer](https://jestjs.io/docs/next/code-transformation) that converts the files into dummy values as shown below.\nFor example, if you want to transform resources such as png, jpg, etc. to a dummy URL, create a transformer as shown below and map the transformer in Jest config.\n\n**jestURLtransformer.js**\n\n```javascript\n// Convert the resource to the dummy URL.\n\nmodule.exports = {\n    process() {\n        return 'module.exports = \\'Pikachu.png\\';';\n    }\n};\n```\n\n**jest.config.js**\n\n```javascript\nmodule.exports = {\n    ...\n    transform: {\n        '^.+\\\\.(ts|tsx)$': ['ts-jest'],\n        '^.+\\\\.(png|jpg|jpeg)$': [`${configPath}/jestURLtransformer.js`)]\n    }\n};\n```\n\nsvg 등의 이미지들을 더미 React 컴포넌트로 바꾸고자 한다면, 아래와 같이 transformer를 하나 제작해주고 Jest config에서 해당 transformer를 매핑해주면 된다.\n\nIf you want to transform resources such as svg to a dummy React component, create a transformer as shown below and map the transformer in the jest config.\n\n**jestComponentTransformer.js**\n\n```javascript\n// Convert the resource to the dummy React component.\n\nmodule.exports = {\n    process() {\n        return 'module.exports = () => \\'Pikachu\\';';\n    }\n};\n```\n\n**jest.config.js**\n\n```javascript\nmodule.exports = {\n    ...\n    transform: {\n        '^.+\\\\.(ts|tsx)$': ['ts-jest'],\n        '^.+\\\\.(png|jpg|jpeg)$': [`${configPath}/jestURLtransformer.js`)],\n        '^.+\\\\.svg$': [`${configPath}/jestComponentTransformer.js`)]\n    }\n};\n```\n"},2772:function(n){n.exports="[marked.js](https://marked.js.org/) 라이브러리를 사용하면 마크다운 문서를 HTML로 변환할 수 있다. 이 블로그도 마크다운으로 포스트를 작성하고 해당 라이브러리로 포스트를 HTML로\n변환해서 렌더링하는 방식으로 작동한다.\n\nWe can convert a Markdown document to HTML by using [marked.js](https://marked.js.org/) library. This blog also works by\nwriting a post in Markdown, converting the post to HTML with the library, and rendering it.\n\n```html\n# Hello, world! => <h1>Hello, world!</h1>\n```\n\n이 때 HTML 변환 과정을 수정하고 싶으면 어떻게 하면 될까? marked.js의 `Renderer` 클래스를 이용하여 커스텀 렌더러를 작성해주면 된다.\n\nWhat should we do if we want to modify HTML converting process? We can do it by writing a custom renderer by\nusing `Renderer` class of marked.js.\n\n```javascript\nconst {Renderer} = require('marked');\n\nclass MyRenderer extends Renderer {\n    ...\n}\n```\n\n[여기서](https://github.com/markedjs/marked/blob/master/src/Renderer.js) `Renderer`가 마크다운의 구성요소들을 어떻게 변환하는지 볼 수 있다. 원하는\n구성요소에 해당하는 메서드를 오버라이드하면 된다. 예를 들어, 아래의 커스텀 렌더러는 이미지를 변환할 때 HTML 태그에 `Image`라는 클래스를 붙일 것이다.\n\nWe can see how marked.js handles the components of Markdown\nat [here](https://github.com/markedjs/marked/blob/master/src/Renderer.js). Override the method which corresponds to the\ncomponent you want. For example, the custom renderer below will add `Image` class to the HTML tag when converting a\nimage.\n\n```javascript\nconst {Renderer} = require('marked');\n\nclass MyRenderer extends Renderer {\n    image(href, title, text) {\n        const out = super.image(href, title, text);\n        return `<img class=\"Image\"${out.substr(4)}`;\n    }\n}\n```\n\n만약 [웹팩](https://webpack.js.org/)을 사용한다면, 아래와 같이 커스텀 렌더러를 적용해줄 수 있다.\n\nIf you use [Webpack](https://webpack.js.org/), you can apply the custom renderer like the following.\n\n```javascript\nmodule: {\n    rules: [\n        {\n            test: /\\.md$/,\n            use: [\n                {loader: 'html-loader'},\n                {loader: 'markdown-loader', options: {renderer: MyRenderer}}\n            ]\n        }\n    ]\n}\n```\n"},1026:function(n){n.exports="드롭다운 같은 커스텀 UI를 만들 때 겪을 수 있는 이슈가 있다.\n`onClick()`을 사용해서 드롭다운의 옵션을 클릭하면 값이 바뀌며,\n`onBlur()`를 사용해서 드롭다운 밖을 클릭하면 드롭다운이 닫히게 하고 싶다고 하자.\n\nThere is an issue we can face when creating custom UIs like dropdowns.\nSuppose that you want to change the current value by attaching `onClick()` on the option buttons,\nand you want to close the dropdown by clicking outside the dropdown by attaching `onBlur()` on the container.\n\n- Container -> onBlur(): Close the dropdown if it is open\n  - Value button\n  - Option group\n    - Option 1 -> onClick(): Updates the current value\n    - Option 2\n    - Option 3\n    - ...\n\n이 때 드롭다운의 옵션을 클릭해도 값이 바뀌지 않는 경우가 있다.\n이는 `onBlur()` 때문에 드롭다운이 `onClick()`이 불리기도 전에 닫혀버리기 때문이다.\n\nSometimes the value does not change when you click the option in the dropdown.\nThis is because `onBlur()` closes the dropdown **before** `onClick()` is called.\n\n이는 하위의 `onMouseDown()`으로 `preventDefault()`를 날려서 상위에 마우스 이벤트가 안 가게 하는 방법으로 막을 수 있다.\n\nYou can prevent that issue by attaching `onMouseDown()` to the option buttons and let them call `preventDefault()` to prevent the mouse event from going to the upper level.\n\n- Container -> onBlur(): Close the dropdown if it is open\n  - Value button\n  - Option group\n    - Option 1 -> onClick(): Updates the current value / onMouseDown(): Prevents **event bubbling**\n    - Option 2\n    - Option 3\n    - ...\n\n[데모](https://codesandbox.io/s/dropdown-onblur-issue-zcnfr?file=/src/App.tsx)에서 `onOptionMouseDown()`의 `event.preventDefault()`를 주석처리해보면 옵션을 클릭해도 값이 바뀌지 않음을 알 수 있다.\n\nIf we comment out `event.preventDefault()` inside `onOptionMousedown()` in the [demo](https://codesandbox.io/s/dropdown-onblur-issue-zcnfr?file=/src/App.tsx), the option buttons will not work.\n"},3754:function(n){n.exports='CSS flex를 사용할 때, 한 자식의 높이가 너무 커서 overflow가 발생하는 경우가 있다.\n이 때 시도해볼 수 있는 트릭 중 하나는 해당 자식의 `min-height`를 0으로 설정하는 것이다.\n\nWhen using CSS flex, when the height of one child is too large, an overflow can occur.\nOne of the tricks you can try is set the child\'s `min-height` to 0.\n\n```html\n<div class="parent">\n    <div class="header">...</div>\n    <div class="content">...</div>\n    <div class="footer">...</div>\n</div>\n```\n\n```css\n.parent {\n    display: flex;\n    flex-direction: column;\n}\n\n.header {\n    ...\n}\n\n.content {\n    flex: 1;\n\n    /* Try this! */\n    min-height: 0;\n}\n\n.footer {\n    ...\n}\n```\n\n간단한 [데모](https://codesandbox.io/s/flex-min-height-trick-8rvio?file=/css/style.css)를 만들어보았다.\n\nI created a simple [demo](https://codesandbox.io/s/flex-min-height-trick-8rvio?file=/css/style.css).\n'},9725:function(n){n.exports="[깃허브](https://github.com/)에서는 [깃허브 페이지](https://pages.github.com/)를 통하여 웹사이트를 호스팅하는 기능을 제공한다. 이\n때 [React Router](https://reactrouter.com/) 등의 라우팅 라이브러리를 사용하여 웹사이트가 마치 여러 개의 페이지로 이루어진 것처럼 하위 경로들을 만들어주고 싶다고 하자\n([SPA: Single Page Application](https://ko.wikipedia.org/wiki/싱글_페이지_애플리케이션)).\n\nIn [GitHub](https://github.com/), we can host a website through\n[GitHub Pages](https://pages.github.com/). Suppose that you want to create the sub-paths as if your website consists of\nseveral pages\n([SPA: Single Page Application](https://en.wikipedia.org/wiki/single_page_application))\nusing a routing library such as [React Router](https://reactrouter.com/).\n\n```\nWebpage: user.github.io\n\nuser.github.io/about -> Show the 'About' component.\nuser.github.io/music -> Show the 'Musics' component.\nuser.github.io/project -> Show the 'Projects' component.\n```\n\n하지만 깃허브 페이지는 SPA를 지원하지 않는다. 하위 경로를 요청시 `index.html`을 반환하지 못하고 404 에러 페이지를 반환한다.\n\nHowever, GitHub pages do not support SPA. When requesting a sub-path, the website returns a 404 error page instead\nof `index.html`.\n\n![GitHub404](https://imgur.com/eA72EXd.png)\n\n해결법 중 하나는 해쉬 기반 라우팅을 사용하는 것이다. 리액트 라우터에서는 `<HashRouter/>`를 사용해주면 된다.\n\nOne of the solutions is to use hash-based routing. In React router, you can use `<HashRouter/>`.\n\n```\nWebpage: user.github.io\n\nuser.github.io/#about -> Show the 'About' component.\nuser.github.io/#music -> Show the 'Musics' component.\nuser.github.io/#project -> Show the 'Projects' component.\n```\n\n만약 해쉬 기반 라우팅을 사용하고 싶지 않다면, 404 페이지를 이용한 트릭을 사용하면 된다\n([spa-github-pages](https://github.com/rafgraph/spa-github-pages)). 404 페이지에 스크립트를 삽입하여, 하위 경로에 접속시 주소(`/...`)를 파라미터 형태(\nex. `/?p=/...`로 바꾸어 주는 아이디어이다. 저장소에 `404.html`을 추가하고, 다음과 같은 자바스크립트 코드를 추가한다.\n\nIf you don't want to use hash-based routing, you can use the 404 page trick\n([spa-github-pages](https://github.com/rafgraph/spa-github-pages)). It is an idea to insert a script into the 404 page\nand change the address (`/...`)\nto the parameter form (ex. `/?p=/...`) when accessing the sub-path. Add `404.html` to the repository, and add the\nfollowing JavaScript code.\n\n```javascript\nvar segmentCount = 0;\nvar l = window.location;\n\nl.replace(\n    l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +\n    l.pathname.split('/').slice(0, 1 + segmentCount).join('/') + '/?p=/' +\n    l.pathname.slice(1).split('/').slice(segmentCount).join('/').replace(/&/g, '~and~') +\n    (l.search ? '&q=' + l.search.slice(1).replace(/&/g, '~and~') : '') +\n    l.hash\n);\n```\n\n이 때 웹사이트의 기본 주소가 `.../github.io` 형태이면 `segmentCount = 0`,\n`.../github.io/xxx` 형태이면 `segmentCount = 1`로 설정하면 된다.\n\nIf the base address of the website is in the form of `.../github.io`, set `segmentCount = 0`. If the base address of the\nwebsite is in the form of `.../github.io/xxx`, set `segmentCount = 1`.\n\n그리고 `index.html`에 다음과 같은 자바스크립트 코드를 추가한다.\n\nAnd add the following JavaScript code in `index.html`.\n\n```javascript\n(function (l) {\n    if (l.search) {\n        var q = {};\n\n        l.search.slice(1).split('&').forEach(function (v) {\n            var a = v.split('=');\n            q[a[0]] = a.slice(1).join('=').replace(/~and~/g, '&');\n        });\n\n        if (q.p !== undefined) {\n            window.history.replaceState(null, null,\n                l.pathname.slice(0, -1) + (q.p || '') +\n                (q.q ? ('?' + q.q) : '') +\n                l.hash\n            );\n        }\n    }\n}(window.location))\n```\n\n이 방법을 쓰면 깃허브 페이지에서도 다음과 같은 라우팅이 가능해진다. 다만 이 방법을 사용하면 웹사이트의\n[검색 엔진 최적화](https://ko.wikipedia.org/wiki/검색_엔진_최적화)\n가 잘 되지 않을 수 있다.\n\nUsing this method, routing like the following becomes possible on the GitHub page. However, if you use this method, the\n[Search Engine Optimization](https://en.wikipedia.org/wiki/search_engine_optimization)\nof the website may not work well.\n\n```\nWebpage: user.github.io\n\nuser.github.io/about -> Show the 'About' component.\nuser.github.io/music -> Show the 'Musics' component.\nuser.github.io/project -> Show the 'Projects' component.\n```\n"},5951:function(n){n.exports="자바스크립트 또는 타입스크립트를 이용하여 HTML 텍스트에서 태그 등을 제외한 순수한 텍스트들만 뽑아내야 할 때가 있다.\n브라우저 환경이라면, DOM API들을 이용하여 이를 간단하게 구현할 수 있다.\nHTML element를 하나 만들고, 그 안에 HTML 텍스트를 집어넣은다음 innerText로 텍스트 정보를 꺼내면 된다.\n\nSometimes we have to extract only pure texts excluding tags, etc. from HTML text using JavaScript or TypeScript.\nIn a browser environment, you can implement it simply by using the DOM APIs.\nCreate an HTML element, put HTML text in it, and then pull out text information with innerText.\n\n```typescript\nconst html = '...';\nconst element = document.createElement('div');\nelement.innerHTML = html;\nconst text = element.innerText;\n```\n\n이 블로그에서도 포스트 검색과 포스트 미리보기 기능을 구현할 때 해당 트릭을 사용하였다.\n포스트 HTML 텍스트에서 순수한 텍스트만 추출하여 검색어와 비교하거나 앞부분만 잘라서 미리보기용으로 사용하였다.\n\nThis blog also used this trick when implementing the post search and post preview functions.\nI extracted only pure text from the post HTML text, and compared it with the search word or cut out its front part to preview the post.\n"},828:function(n){n.exports="웹페이지에서 iframe의 src를 변경하면 브라우저의 히스토리가 변경될 수 있다. 이를 방지하는 방법 중 하나는, src가 변경되면 iframe 요소를 지우고 새로 렌더링하는 것이다.\n만약 [리액트](https://reactjs.org/)를 사용중이라면,\n[key](https://reactjs.org/docs/lists-and-keys.html)를 사용하여 간단하게 해결할 수 있다.\n\nIf you change the src of iframe, the browser history can be modified. One of the methods to prevent this is to delete\nthe iframe element and render a new one when the src is changed. If you are using [React](https://reactjs.org/), it can\nbe solved simply by using the [key](https://reactjs.org/docs/lists-and-keys.html).\n\n예를 들어, 아래 코드를 사용하여 유튜브 비디오를 표시하려고 한다. 이 때 새로운 비디오를 렌더링하고자 기존과 다른 `id`의 값을 주면, 기존에 렌더링된 iframe 요소는 그대로 남아있고 src만 변경되므로\n브라우저 히스토리가 변경될 수 있다.\n\nFor example, we want to display a YouTube video using the code below. If you give a different `id` value to render a new\nvideo, since the previously rendered iframe element is still alive and only the src is changed, the browser history can\nbe modified.\n\n```typescript jsx\nconst Video = ({id = ''}) => (\n    <iframe\n        frameBorder={0}\n        allowFullScreen={true}\n        src={`https://www.youtube.com/embed/${id}`}\n    />\n);\n```\n\n아래와 같이 key를 사용하여 리액트가 iframe을 새로 렌더링하도록 강제하면 히스토리에 영향을 미치지 않고 비디오를 변경할 수 있다.\n\nIf you force React to render a new iframe using the key as shown below, You can change the video without affecting the\nhistory.\n\n```typescript jsx\nconst Video = ({id = ''}) => (\n    <iframe\n        key = {id} // Or a counter, a random value, ...\n        frameBorder={0}\n        allowFullScreen={true}\n        src={`https://www.youtube.com/embed/${id}`}\n    />\n);\n```\n"},663:function(n){n.exports="인상깊은 슬립낫 라이브 영상들\n\nImpressive Slipknot live performances\n<br/><br/>\n\n<https://youtu.be/evL9qoHMgxA>\n\n(sic) / Ozzfest 1999\n<br/><br/>\n\n<https://youtu.be/pelgcovZkFk>\n\n(sic) / Dynamo 2000\n<br/><br/>\n\n<https://youtu.be/fO1ebT0XnlE>\n\nThe heretic anthem / Conan O'Brien Show 2001\n<br/><br/>\n\n<https://youtu.be/u6ZtHrWiSAk>\n\nPeople=Shit / London 2002\n<br/><br/>\n\n<https://youtu.be/l3GnK3bhBqQ>\n\nThe Heretic Anthem / London 2002\n<br/><br/>\n\n<https://youtu.be/EvPI9ajmzUg>\n\nThe Blister Exists / Jimmy Kimmel 2004\n<br/><br/>\n\n<https://youtu.be/bBA3x9jt6Is>\n\nThe Blister Exists / Big day out 2005\n<br/><br/>\n\n<https://youtu.be/MKyepXdZFPE>\n\nWait And Bleed / Download 2009\n<br/><br/>\n\n<https://youtu.be/IU4DqZJDshA>\n\nEyeless / Download 2009\n<br/><br/>\n\n<https://youtu.be/S9fcSqi4j9g>\n\n(sic) / Knotfest 2012\n<br/><br/>\n\n<https://youtu.be/R5NMwRFI3CA>\n\nDisasterpiece / Graspop 2013\n<br/><br/>\n\n<https://youtu.be/qnZtGDFu3k0>\n\nCuster / Knotfest 2014\n<br/><br/>\n\n<https://youtu.be/aPnhe-0gbsc>\n\nWait And Bleed / Knotfest 2019\n<br/><br/>\n\n<https://youtu.be/kDRiY_brD-Q>\n\nPsychosocial / BBC Radio 2020\n"},3009:function(n){n.exports="마크다운 테스트  \nMarkdown test\n\n# Link\n\n## Raw\n\n- <https://github.com/>\n- <https://facebook.com/>\n- <https://www.youtube.com/>\n\n## Page\n\n- [GitHub](https://github.com/)\n- [Facebook](http://facebook.com/)\n- [YouTube](https://www.youtube.com/)\n\n## Image\n\n![Size100](https://via.placeholder.com/100)\n![Size150](https://via.placeholder.com/150)\n![Size200](https://via.placeholder.com/200)\n\n## Video (YouTube)\n\n<https://youtu.be/-_7HwAXKycU>\n\n<https://www.youtube.com/watch?v=OK9uIiq28dQ>\n\n# Table\n\n| Name  | Age | Height |\n| ----- | --- | ------ |\n| John  | 25  | 178    |\n| Paul  | 30  | 180    |\n| Cindy | 27  | 175    |\n\n# Code\n\n## Bash\n\n`$ ./py -3 run.py`\n\n## Python\n\n```python\nimport math\n\nx = 3.5\nprint('sqrt(%f) = %f', x, math.sqrt(x))\n```\n\n## JavaScript\n\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\n\nconsole.log(add(3, 2));\n```\n\n## C++\n\n```cpp\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello, world!\" << std::endl;\n    return 0;\n}\n```\n"},6251:function(n){n.exports="![Guitars](https://imgur.com/vmvAa5V.jpg)\n\n## (1) Charvel Pro-Mod San Dimas Style 2-7 HH\n\n7현 기타!\n브릿지 픽업은 던컨 나즈굴, 넥 픽업은 던컨 센티언트이다. 어둡고 강력한 소리를 가진 멋진 메탈머신이다.\n\n7-string guitar!\nThe bridge pickup is Duncan Nazgul, and the neck pickup is Duncan Sentient. Awesome metal machine with dark & powerful\nsound.\n\n## (2) Fender Mexico Player Telecaster HH (Drop B tuning)\n\n굵은 줄이 장착되어 있으며 드롭 B(BF#BEG#C#)로 튜닝되어 있다. 슬립낫 등의 메탈 밴드의 곡들을 연주할 때 주로 사용한다.\n\nIt has the thick strings, and it is tuned in drop B (BF#BEG#C#). I use this for playing the songs of the metal bands\nsuch as Slipknot.\n\n## (3) Fender Mexico Player Telecaster HH (Standard tuning)\n\n(2)와 동일한 모델이지만 표준 튜닝으로 튜닝되어 있다. 팝, 재즈 등을 연주할 때 주로 사용한다.\n\nSame model as (2), but tuned in standard tuning. I use this for playing pop, jazz, etc.\n"},7935:function(n){n.exports='[Next.js](https://nextjs.org/)는 기본적으로 서버 사이드 렌더링(SSR)을 위한 프레임워크이지만,\n정적 사이트 생성 (SSG) 기능도 제공한다.\n(이 블로그와 같이) 이 기능을 이용하여 GitHub pages를 만들 수 있다.\n다만 이를 위해서는 자잘한 설정이 필요하다.\n\n[Next.js](https://nextjs.org/) is basically a framework for server-side rendering (SSR),\nbut it also provides static site generation (SSG).\nYou can use that feature to create GitHub pages (like this blog).\nThere are some configurations we need to set.\n\n## 생성 위치 설정 Configure output folder\n\nGitHub pages를 사용하려면, 웹사이트의 index.html 파일이 프로젝트 루트 또는 "docs" 폴더에 위치하게 하면 된다.\n"docs" 폴더에 위치하게 하고 싶다고 가정하자.\n그러면 `next build`를 사용해서 **우선 빌드를 한 뒤**, `next export -o docs`를 이용해서 정적 사이트 생성을 해주면 된다.\n\nTo use GitHub pages, we need to place index.html at the project root or "docs" folder.\nSuppose that we want to place it at "docs" folder.\n**Build the website first** using `next build`, and generate the static website using `next export -o docs`.\n\n## Jekyll 비활성화 Disable Jekyll\n\n이대로 GitHub pages를 생성해보면, 웹사이트가 잘 작동하지 않는 경우가 있다.\nGitHub pages에는 기본적으로 [Jekyll](https://jekyllrb.com/)이 깔려있는데, 이것이 Next.js가 사용하려고 만드는 \\_next 폴더를 무시해버리기 때문이다.\n해결법은 간단하다. docs 폴더에 .nojekyll이라는 이름의 파일을 하나 만들어 주면 된다. (내용물은 비어도 된다.)\n아래처럼 스크립트를 작성해서 자동화해주면 편리하다.\n\nSometimes the website does not work well after performing the previous processes.\nThis is because [Jekyll](https://jekyllrb.com/), installed on GitHub pages by default, ignores the \\_next folder Next.js creates to use.\nThe solution is simple. Just create a file named .nojekyll in the docs folder. (The contents can be empty.)\nIt is convenient to write a automation script like the one below.\n\nPostBuild.js\n\n```javascript\nconst fs = require("fs");\n\nfs.writeFileSync("docs/.nojekyll", "Turn off Jekyll!");\n```\n\npackage.json\n\n```json\n{\n  "scripts": {\n    "deploy": "next build && next export -o docs && node PostBuild"\n  }\n}\n```\n\n## 경로 설정 Path configuration\n\nGitHub 레포지토리가 사용자 사이트용 레포지토리(`[username].github.io`)가 아니라 특정 프로젝트용 레포지토리(`[username].github.io/[projectname]`)인 경우에는 추가적인 설정이 필요하다.\n예컨대 레포지토리 이름이 my-app이라면, next.config.js 파일을 생성하고 아래처럼 `basePath`를 추가해주면 된다.\n\nIf your GitHub repository is for a specific project (`[username].github.io/[projectname]`) rather than for your site (`[username].github.io`), additional setups are required.\nFor example, if the repository name is my-app, create a file next.config.js and add `basePath` like below.\n\n```javascript\nmodule.exports = {\n  basePath: "/my-app",\n};\n```\n\npublic 폴더를 통해 이미지 등의 정적 파일들을 사용할때도, 경로 지정이 필요하다.\n아래처럼 URL에 레포지토리 이름을 넣어주면 된다.\n\nWhen using static files such as images through the public folder, you need to specify the path, too.\nPut the repository name in the URL like below.\n\n```jsx\nconst basePath = "/my-app";\n\nconst Icon = () => <img src={`${basePath}/my-image.png`} alt="My image">;\n```\n'},516:function(n){n.exports='이 웹사이트를 실행했을 때, 작동은 잘 되는 것 같은데 콘솔에 아래와 같은 에러 메시지들이 뜨는 문제가 있었다.\r\n\r\nWhen I run this website, it seems to work fine, but I got following error messages appearing on the console.\r\n\r\n```text\r\nUncaught Error: Minified React error #425; visit https://reactjs.org/docs/error-decoder.html?invariant=425 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n\r\nUncaught Error: Minified React error #418; visit https://reactjs.org/docs/error-decoder.html?invariant=418 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n\r\nUncaught Error: Minified React error #423; visit https://reactjs.org/docs/error-decoder.html?invariant=423 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n```\r\n\r\n위 에러 메시지들에 나온 링크를 방문해보면 아래와 같은 메시지들이 나온다.\r\n\r\nIf you visit the links in these error messages, you will see the following messages.\r\n\r\n- Text content does not match server-rendered HTML.\r\n- Hydration failed because the initial UI does not match what was rendered on the server.\r\n- There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.\r\n\r\n이 웹사이트는 Next.js로 정적 사이트 생성(SSG - Static Site Generation)을 하여 만들었다.\r\nNext.js로 미리 생성한 HTML을 일단 유저에게 보여주고, 그 후에 React로 hydration & CSR(Client-side Rendering)을 하는 방식이다.\r\n따라서, 위의 메시지들은 미리 렌더링한 HTML과 클라이언트에서 렌더링한 HTML 간에 내용물이 불일치한다는 것을 의미한다.\r\n이 문제는 SSR 뿐만 아니라 SSR 상황에서도 동일하게 발생한다.\r\n\r\nI created this website by using SSG (Static Site Generation) with Next.js\r\nIt works by showing the pre-generated HTML to the user first, and performing hydration & CSR (Client-side Rendering) with React.\r\nTherefore, the above messages mean that there is a content mismatch between the pre-rendered HTML and the client-rendered HTML.\r\nThis problem can occur not only SSG but also SSR, too.\r\n\r\n원인은 두 곳에 있었다.\r\n하나는 페이지 상단의 시계 UI이다.\r\n\r\nThere were two reasons.\r\nOne is the clock UI at the top of the page.\r\n\r\n```typescript\r\nimport { useEffect, useState } from "react";\r\n\r\nexport default function useNow() {\r\n  const [now, setNow] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setNow(new Date());\r\n    }, 1000 * 10);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    year: now.getFullYear(),\r\n    month: now.getMonth() + 1,\r\n    monthDay: now.getDate(),\r\n    hour: now.getHours(),\r\n    minute: now.getMinutes(),\r\n    second: now.getSeconds(),\r\n  };\r\n}\r\n```\r\n\r\n시계 기능을 구현하기 위해 위와 같은 custom hook을 작성했었다.\r\n그런데 `const [now, setNow] = useState(new Date());`에서 `new Date()`의 값은 서버 렌더링 시와, 클라이언트 렌더링 시에 **서로 다르다**.\r\n이로 인하여 시계 텍스트가 두 상황에서 불일치하여 에러가 났던 것이다.\r\nCSR 전까지는 실제 시간을 사용하지 않고 더미 값을 쓰도록 하여 해결하였다.\r\n\r\nI wrote the above custom hook to implement the clock.\r\nHowever, in `const [now, setNow] = useState(new Date());`, the value of `new Date()` is **different** between server rendering and client rendering.\r\nThis inconsistency of the clock text caused the error.\r\nI solved this problem by using a dummy value until we perform CSR.\r\n\r\n다만 이러면 초반에 시간이 더미 값으로 떠서 이상해 보이는 문제가 있다.\r\n적절한 로딩 UI를 부여하면 좀 낫지 않을까 한다.\r\n\r\nHowever, we get a problem that the user sees a dummy value at the beginning.\r\nWe may fix that problem by using appropriate loading UI.\r\n\r\n```typescript\r\nimport { useEffect, useState } from "react";\r\n\r\ninterface Time {\r\n  year: number;\r\n  month: number;\r\n  monthDay: number;\r\n  hour: number;\r\n  minute: number;\r\n  second: number;\r\n}\r\n\r\nexport default function useNow(): Time {\r\n  // If we use new Date() at here, server HTML and client HTML won\'t match.\r\n  // So we don\'t compute date before useEffect().\r\n  const [now, setNow] = useState<Date | null>(null);\r\n\r\n  useEffect(() => {\r\n    setNow(new Date());\r\n\r\n    const interval = setInterval(() => {\r\n      setNow(new Date());\r\n    }, 1000 * 10);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return now === null\r\n    ? {\r\n        year: 0,\r\n        month: 0,\r\n        monthDay: 0,\r\n        hour: 0,\r\n        minute: 0,\r\n        second: 0,\r\n      }\r\n    : {\r\n        year: now.getFullYear(),\r\n        month: now.getMonth() + 1,\r\n        monthDay: now.getDate(),\r\n        hour: now.getHours(),\r\n        minute: now.getMinutes(),\r\n        second: now.getSeconds(),\r\n      };\r\n}\r\n```\r\n\r\n다른 하나는 이 글처럼 코드를 렌더링 할 때 쓰는 react-syntax-highlighter 라이브러리이다.\r\n해당 라이브러리는 내부적으로 [Prism.js](https://prismjs.com/)(또는 [highlight.js](https://highlightjs.org/))를 호출한다.\r\n이들은 코드를 읽고 **DOM을 변경**하여 코드 하이라이팅을 한다.\r\n이것이 mismatch를 만들어낸 것으로 추정한다.\r\n\r\n이와 같은 상황에서 특정 동작을 클라이언트에서만 하도록 하고 싶으면, `useEffect()`를 활용할 수 있다.\r\n`useEffect()` 안의 코드는 항상 **클라이언트에서만 실행**된다.\r\n`useEffect()`가 처음 불리는 시점은 컴포넌트가 마운트된 이후, 즉 DOM이 생성된 이후이기 때문이다.\r\n\r\nThe other is the react-syntax-highlighter library used when rendering code like this article.\r\nThe library calls [Prism.js](https://prismjs.com/) (or [highlight.js](https://highlightjs.org/)) internally.\r\nThey read the code and **change the DOM** to highlight the code.\r\nIt seems that that behavior created mismatches.\r\n\r\nIn such a situation, if you want to make certain actions executed only for the client, you can use `useEffect()`.\r\nCode in `useEffect()` is always executed **only on the client**.\r\nThis is because the first time `useEffect()` is called is after the component is mounted i.e after the DOM is created.\r\n\r\n우선 아래와 같은 custom hook을 하나 만들었다.\r\n`isClient`는 클라이언트에서만 true이 된다.\r\n\r\nI created the following custom hook first.\r\n`isClient` can be true only on the client.\r\n\r\n```typescript\r\nimport { useEffect, useState } from "react";\r\n\r\nexport default function useClient() {\r\n  const [isClient, setClient] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setClient(true);\r\n  }, []);\r\n\r\n  return { isClient };\r\n}\r\n```\r\n\r\n이를 이용하여, 아래와 같이 CSR 전까지는 react-syntax-highlighter를 적용하지 않도록 하여 에러를 해결하였다.\r\n(가독성을 위해 일부 props는 생략하였다.)\r\n\r\nUsing this, I solved the errors by preventing the component from applying react-syntax-highlighter before starting CSR.\r\n(I omitted some props for readability.)\r\n\r\n```tsx\r\nimport { PrismLight as SyntaxHighlighter } from "react-syntax-highlighter";\r\n\r\n...\r\n\r\nconst PostView = () => (\r\n  <ReactMarkdown\r\n    components={{\r\n      code: MarkdownCode,\r\n      a: MarkdownLink,\r\n      img: MarkdownImage,\r\n    }}\r\n  >\r\n    ...\r\n  </ReactMarkdown>\r\n);\r\n\r\n...\r\n\r\nconst MarkdownCode = () => {\r\n  const { isClient } = useClient();\r\n\r\n  ...\r\n\r\n  return isClient && ... ? (\r\n    <SyntaxHighlighter>\r\n      ...\r\n    </SyntaxHighlighter>\r\n  ) : (\r\n    <InlineCode>\r\n      ...\r\n    </InlineCode>\r\n  );\r\n};\r\n```\r\n'},4721:function(n){n.exports="[리액트 라우터](https://reactrouter.com/)를 사용할 때, 만약 웹페이지 내부에서 예외가 발생하면 라우팅이 정상적으로 작동하지 않는 경우가 있다. 라우팅을 방해하지 않으면서 예외가 콘솔에 출력되게\n하려면, 에러를 처리하는 컴포넌트를 만들어서 각 경로(route)에 해당하는 컴포넌트를 덮어주면 된다.\n\nWhen using [React Router](https://reactrouter.com/), routing may not work properly if an exception occurs inside a web\npage. If you want the exceptions to be printed on the console without interfering routing, you can create an error\nhandler and wrap the components corresponding to each route.\n\n```jsx\n{path: '/menu', element: <MenuPage/>}\n=> {path: '/menu', element: <ErrorHandler><MenuPage/></ErrorHandler>}\n```\n\n[리액트](https://reactjs.org/)에서 에러 핸들러는 다음과 같이 만들면 된다.\n([타입스크립트](https://www.typescriptlang.org/)로 작성하였다.)\n\nIn [React](https://reactjs.org/), you can create an error handler like this:\n(The code is written in [TypeScript](https://www.typescriptlang.org/).)\n\n```typescript jsx\nimport {Component, ErrorInfo, ReactNode} from 'react';\n\nclass ErrorHandler extends Component<{ children: ReactNode }> {\n    constructor({children = null}) {\n        super({children});\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        // Print the exception.\n        console.error(error?.toString());\n        console.error(errorInfo?.componentStack);\n    }\n\n    render() {\n        // Render the component.\n        return this.props.children;\n    }\n}\n```\n\n에러 발생시에 에러 페이지 등 다른 컴포넌트를 렌더링하고 싶다면, 아래와 같이 하면 된다.\n\nIf you want to render other components such as error pages when an error occurs, you can do as follows.\n\n```typescript jsx\nimport {Component, ErrorInfo, ReactNode} from 'react';\n\nclass ErrorHandler extends Component<{ children: ReactNode }, { hasError: boolean }> {\n    constructor({children = null}) {\n        super({children});\n        // hasError = true when we have an exception.\n        this.state = {hasError: false};\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        this.setState({hasError: true}, () => {\n            console.error(error?.toString());\n            console.error(errorInfo?.componentStack);\n        });\n    }\n\n    render() {\n        // If we have an exception, render <ErrorPage/> instead.\n        return this.state.hasError ? <ErrorPage/> : this.props.children;\n    }\n}\n```\n"},3751:function(n){n.exports="[Next.js](https://nextjs.org/) 등의 도구들을 이용하여 SSR(Server-Side Rendering)을 할 때,\n`window` 객체를 사용하면 아래와 같은 에러가 날 때가 있다.\n\nWhen we use `window` object while performing SSR (Server-Side Rendering) using tools such as [Next.js](https://nextjs.org/),\n, we sometimes get the error like the message below.\n\n```typescript\nwindow.addEventListener('resize', () => {\n    console.log('Hello!');\n});\n```\n\n```text\nServer Error\nReferenceError: window is not defined\n\nThis error happened while generating the page. Any console logs will be displayed in the terminal window.\n```\n\n아래와 같이 `window` 객체가 존재하는가 체크해주면 해결된다.\n\nWe can solve that problem by checking whether `window` object exists before using it.\n\n```typescript\nif (typeof window !== 'undefined') {\n    window.addEventListener('resize', () => {\n        console.log('Hello!');\n    });\n}\n```\n"},8234:function(n){n.exports='C++에서 트리를 만들때, 스마트 포인터 `std::shared_ptr`를 활용하면 자식 노드의 메모리 해제를 직접 해주지 않아도 될 뿐만 아니라 여러 트리가 한 노드를 참조하는 상황에서도 알아서 메모리가 해제되도록 할 수 있다.\n\nWhen creating a tree in C++, if you use the smart pointer `std::shared_ptr`, you don\'t have to release the memory of each child node directly, and you can let the program to automatically release the memory even when multiple trees refer to one node.\n\n```cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <memory>\n\nclass Node {\npublic:\n    Node(const std::string& name): m_name(name) {\n        // Do nothing.\n    }\n\n    void print(int level = 0) {\n        printThis(level);\n        printChilds(level);\n    }\n\n    void addChild(const std::shared_ptr<Node>& child) {\n        m_childs.push_back(child);\n    }\n\nprivate:\n    void printThis(int level) {\n        std::stringstream ss;\n\n        for (int i = 0; i < level - 1; i++) {\n            ss << "   ";\n        }\n\n        if (level > 0) {\n            ss << "|- ";\n        }\n\n        ss << m_name << "\\n";\n        std::cout << ss.str();\n    }\n\n    void printChilds(int level) {\n        for (auto child: m_childs) {\n            child->print(level + 1);\n        }\n    }\n\nprivate:\n    std::string m_name;\n    std::vector<std::shared_ptr<Node>> m_childs;\n};\n```\n\n아래와 같이 트리 두 개를 만들어 보자. 두 트리는 노드 4를 공유한다.\n\nLet\'s create two trees as shown below. The trees share node 4.\n\n**Tree**\n\n```\nTree 1: 0 - 1 - 2\n            |\n            3 - 4 - 5\n                |\nTree 2: 6 ------+\n                |\n                7 - 8\n                |\n                9 - 10 - 11\n```\n\n**Code**\n\n```cpp\nint main() {\n    std::vector<std::shared_ptr<Node>> nodes;\n\n    for (int i = 0; i <= 11; i++) {\n        nodes.push_back(std::make_shared<Node>(std::to_string(i)));\n    }\n\n    // Tree 1.\n    nodes[0]->addChild(nodes[1]);\n    nodes[0]->addChild(nodes[3]);\n    nodes[1]->addChild(nodes[2]);\n    nodes[3]->addChild(nodes[4]);\n    nodes[4]->addChild(nodes[5]);\n\n    // Tree 2.\n    nodes[6]->addChild(nodes[4]);\n    nodes[6]->addChild(nodes[7]);\n    nodes[6]->addChild(nodes[9]);\n    nodes[7]->addChild(nodes[8]);\n    nodes[9]->addChild(nodes[10]);\n    nodes[10]->addChild(nodes[11]);\n\n    nodes[0]->print();\n    nodes[6]->print();\n\n    return 0;\n}\n```\n\n프로그램은 아래와 같은 결과를 출력할 것이다.\n[Valgrind](https://valgrind.org/)를 사용하여 메모리 누수가 없음을 확인할 수 있다.\n\nThe program will print the following output.\nYou can use [Valgrind](https://valgrind.org/) to confirm that there is no memory leak.\n\n```\n0\n|- 1\n   |- 2\n|- 3\n   |- 4\n      |- 5\n6\n|- 4\n   |- 5\n|- 7\n   |- 8\n|- 9\n   |- 10\n      |- 11\n```\n'},5930:function(n){n.exports="[Storybook](https://storybook.js.org/)을 사용할 때 Storybook의 기본 Webpack 세팅에 나의 세팅을 합쳐서 사용하는 경우가 있다.\n\nWe sometimes merge our Webpack configuration to the default Storybook Webpack configuration when we use [Storybook](https://storybook.js.org/).\n\n```JavaScript\n// ex. .storybook/main.js\n\nconst createOurConfig = require('../webpack.config.js');\n\nconst ourConfig = createOurConfig();\n\nmodule.exports = {\n    ...,\n    webpackFinal: config => {\n        config.resolve = {\n            ...config.resolve,\n            ...ourConfig.resolve\n        };\n\n        config.module.rules = [\n            ...config.module.rules,\n            ...ourConfig.module.rules\n        ];\n\n        return config;\n    }\n};\n```\n\n이 때 기본 Webpack 세팅에 css-loader 등의 스타일 세팅을 합치면 빌드 시 에러가 나는 경우가 있다.\n\n이는 기본 Webpack 세팅에 이미 스타일 관련 loader들이 들어있어 이미 변환이 된 결과물에 나의 loader들이 적용되기 때문이다.\n이 문제는 아래와 같이 기본 loader들을 제거해주고 (ex. 정규 표현식에 css가 들어가는 것들만 제외) 나의 loader들을 쓰도록 하는 방법으로 해결 가능하다.\n\nIf we merge our style configuration such as css-loader, we sometimes get the errors.\n\nThe reasons is Storybook's default Webpack configuration already defines the loaders related to style.\nWe can solve that problem by excluding the those loaders (ex. Exclude the loaders whose regex includes 'css') and using our loaders instead.\n\n```JavaScript\n// ex. .storybook/main.js\n\nconst createOurConfig = require('../webpack.config.js');\n\nconst ourConfig = createOurConfig();\n\nmodule.exports = {\n    ...,\n    webpackFinal: config => {\n        config.resolve = {\n            ...config.resolve,\n            ...ourConfig.resolve\n        };\n\n        config.module.rules = [\n            // Exclude default style rules.\n            ...config.module.rules.filter(rule => !rule.test.toString().includes('css')),\n            ...ourConfig.module.rules\n        ];\n\n        return config;\n    }\n};\n```\n\n\n"},6223:function(n){n.exports="타입스크립트에서 값의 '종류'를 표현하는 방식은 여러 가지가 있다.  \n[enum](https://www.typescriptlang.org/docs/handbook/enums.html)을 사용할 수도 있고, string literal의 union type(여기서는 편의상 'string union type'이라고 하자)을 사용할 수도 있다.\n\nThere are several ways to express the 'category' of a value in TypeScript.  \nYou can use [enum](https://www.typescriptlang.org/docs/handbook/enums.html) or the union type of string literals (Let's call it 'string union type' for convenience).\n\n```typescript\n// enum.\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\n// string union type.\ntype Color = 'Red' | 'Green' | 'Blue';\n```\n\n두 방식을 다양한 측면에서 비교해 보자.\n\nLet's compare the two methods in various aspects.\n\n## 생성되는 자바스크립트 코드 Generated JavaScript code\n\nenum의 경우 컴파일 시 어떤 객체(일종의 map)를 생성하는 자바스크립트 코드로 변환된다.\n해당 객체에는 \\{값: 이름\\}들과 \\{이름: 값\\}들이 모두 들어가 있다.\n\nenum is converted into JavaScript code that creates an object (which works as a map) at compile time.\nThe object contains both \\{value: name\\} and \\{name: value\\}.\n\n```typescript\n// enum.\n\n// Original TypeScript code.\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\n// Result JavaScript code.\nvar Color;\n(function (Color) {\n    Color[Color[\"Red\"] = 0] = \"Red\";\n    Color[Color[\"Green\"] = 1] = \"Green\";\n    Color[Color[\"Blue\"] = 2] = \"Blue\";\n})(Color || (Color = {}));\n\n// Actual value of Color.\n{\n    '0': 'Red',\n    '1': 'Green',\n    '2': 'Blue',\n    'Red': 0,\n    'Green': 1,\n    'Blue': 2\n}\n```\n\n이런 특이한 객체를 생성하는 건, 아마도 값에서 이름을 얻는 기능([reverse mapping](https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings))을 위한 것으로 생각된다.\n\nI think the purpose of this unusual object is probably supporting the [reverse mapping](https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings) (getting the name from the value).\n\n```typescript\nconst x = Color.Red;\nconst xName = Color[x]; // 'Red'.\n```\n\nenum에 string 값을 직접 붙일 경우는 생성되는 코드가 조금 다르다.\n\nWhen we map the strings on the enum, the generated code is slightly different.\n\n```typescript\n// enum.\n\n// Original TypeScript code.\nenum Color {\n    Red = 'Red',\n    Green = 'Green',\n    Blue = 'LightSkyBlue'\n}\n\n// Result JavaScript code.\nvar Color;\n(function (Color) {\n    Color[\"Red\"] = \"Red\";\n    Color[\"Green\"] = \"Green\";\n    Color[\"Blue\"] = \"LightSkyBlue\";\n})(Color || (Color = {}));\n\n// Actual value of Color.\n{\n    'Red': 'Red',\n    'Green': 'Green',\n    'Blue': 'LightSkyBlue'\n}\n```\n\nenum의 변형판인 [const enum](https://www.typescriptlang.org/docs/handbook/enums.html#const-enums)의 경우, 별도의 객체를 생성하지 않고 enum 값을 상수로 변환한다.\n(생성되는 코드가 간단한 대신, reverse mapping 등 몇 가지 기능들이 제한된다.)\n\nIn the case of [const enum](https://www.typescriptlang.org/docs/handbook/enums.html#const-enums), a variant of enum, the enum value is converted into a constant without creating a separate object.\n(The generated code is simpler, but some features such as reverse mapping are disabled.)\n\n```typescript\n// const enum.\n\n// Original TypeScript code.\nconst enum Color {\n    Red,\n    Green,\n    Blue\n}\n\nconst x = Color.Red;\n\n// Result JavaScript code.\nvar x = 0 /* Red */;\n```\n\nstring union type의 경우는 타입 정의는 날아가고 로직만 남는다.\n\nAfter compiling a string union type, the type definition is blown away and only the logic remains.\n\n```typescript\n// string union type.\n\n// Original TypeScript code.\ntype Color = 'Red' | 'Green' | 'Blue';\n\nconst x: Color = 'Red';\n\n// Result JavaScript code.\nvar x = 'Red';\n```\n\nstring union type이 타입스크립트 코드와 생성되는 자바스크립트 코드가 동일하다는 점, 즉 원본 코드가 보이는 그대로 작동한다는 점에서 작동 방식이 **가장 직관적**으로 보인다.\n\nIt seems that the way the string union type works is **the most intuitive** in that the TypeScript code and the generated JavaScript code are the same, that is, the original code works as it appears.\n\n## 성능 Performance\n\nenum, const enum, string union type의 값 비교 성능을 측정하는 프로그램을 만들어 보았다.\n비슷한 역할을 하는 함수를 5000000번씩 실행하여 소요 시간의 합을 측정한다.\n**[코드 링크](https://www.typescriptlang.org/play?target=1#code/GYVwdgxgLglg9mABAWwKYEMDOIBOqAUY6aAXIplDjGAOYA0iAVnAEZn4CUiAvAHyIA3ODAAmDSjHQAbAMJxwUHogCsABnUauAbwBQifYimpFsNAGUQyJaoDcOvQeBwcifEcUxrNxJ4A8iCWk5BW9PAGpuRABGbQcDAwgECnIodBwoABUYNCUAB1QcJxxkdEhUADowOAB3Tjt4+OYWOriGxLBk1DARLJzI-MLnErLKmpaGg1NUCysIxC6e7NREAFoUtMyl+oMAX3t49sw4I3KpOBp8AAMAEi0iNB2yDLhUqQClpVupmYB6KI1yqodpgGAA5SwsAqIODAAJUaSYMhfeGyeRgKA7S4cOx7HT4Tg8fi6eJdSyIORnFzEiaIABKqDErXiAHE8F06EyDAAhKQgVCtXEHJKKARKCnOcr0kTbfTuchefYGNBYXAEADkAFVMMtSVYANaoACe1WcIjVDAJfEQ1ImMFh+FF3Cd5OOEqlsRpDUwSiiMoaO3mUm1Pntjud4pw5VZqC6Hs9Bm9kQATH74gHUEHlnbXGHIhHyjy+XH4-LIgBmVO7AXYnQ7DgtPGWomtQ6KXUuynWzn6KUcz3R9ndxCF-lpxX6VuCMWuyNSv1yxOIWzjlAYbB4fCa4OT9sG42m82uLhWm0NbMOnjhmeShnF+OL31D9OZkM5y9568DsB3z2LlNPwNg3PXMOwlEcfxpRcKyfascXrGtG2PZt4igQ18lAlxIjVKU1UQAAfRA1S-XCCLVEc1TsFthUEMgIyUbCGQo1oFwVVplXXdUtWWCgqFoRBwHgMBDybLtPWA99CJwiCJgfSt9GfIDQwkoi2SE6SvSUf9PQUrMlKdLDyPU+IoLkxA9jTGs6wbQ5jgqM4LjVAARBBUAAQjVGsgA)**\n\n프로그램을 여러 번 실행해 보면, 세 방식 중 가장 빠른 방식, 가장 느린 방식이 그때그때 다르게 나온다.\n즉 성능적으로는 **세 방식 모두 큰 차이를 보이지 않는 것으로 보인다.**\n\nI made a program to measure the value comparison performance of enum, const enum, and string union types.\nMeasure the sum of the time required by executing the function with a similar role 5,000,000 times.\n**[Code link](https://www.typescriptlang.org/play?target=1#code/GYVwdgxgLglg9mABAWwKYEMDOIBOqAUY6aAXIplDjGAOYA0iAVnAEZn4CUiAvAHyIA3ODAAmDSjHQAbAMJxwUHogCsABnUauAbwBQifYimpFsNAGUQyJaoDcOvQeBwcifEcUxrNxJ4A8iCWk5BW9PAGpuRABGbQcDAwgECnIodBwoABUYNCUAB1QcJxxkdEhUADowOAB3Tjt4+OYWOriGxLBk1DARLJzI-MLnErLKmpaGg1NUCysIxC6e7NREAFoUtMyl+oMAX3t49sw4I3KpOBp8AAMAEi0iNB2yDLhUqQClpVupmYB6KI1yqodpgGAA5SwsAqIODAAJUaSYMhfeGyeRgKA7S4cOx7HT4Tg8fi6eJdSyIORnFzEiaIABKqDErXiAHE8F06EyDAAhKQgVCtXEHJKKARKCnOcr0kTbfTuchefYGNBYXAEADkAFVMMtSVYANaoACe1WcIjVDAJfEQ1ImMFh+FF3Cd5OOEqlsRpDUwSiiMoaO3mUm1Pntjud4pw5VZqC6Hs9Bm9kQATH74gHUEHlnbXGHIhHyjy+XH4-LIgBmVO7AXYnQ7DgtPGWomtQ6KXUuynWzn6KUcz3R9ndxCF-lpxX6VuCMWuyNSv1yxOIWzjlAYbB4fCa4OT9sG42m82uLhWm0NbMOnjhmeShnF+OL31D9OZkM5y9568DsB3z2LlNPwNg3PXMOwlEcfxpRcKyfascXrGtG2PZt4igQ18lAlxIjVKU1UQAAfRA1S-XCCLVEc1TsFthUEMgIyUbCGQo1oFwVVplXXdUtWWCgqFoRBwHgMBDybLtPWA99CJwiCJgfSt9GfIDQwkoi2SE6SvSUf9PQUrMlKdLDyPU+IoLkxA9jTGs6wbQ5jgqM4LjVAARBBUAAQjVGsgA)**\n\nIf we run the program several times, the fastest method and the slowest method out of the these methods come out differently each time.\nSo, in terms of performance, **all three methods do not seem to show a significant difference.**\n\n```text\n[LOG]: \"Use enum keyword: Total time = 2.3028000013828276s, Number of trials: 5000000\" \n[LOG]: \"Use const enum keyword: Total time = 2.3270000000298023s, Number of trials: 5000000\" \n[LOG]: \"Use string union: Total time = 2.2881999993622304s, Number of trials: 5000000\" \n[LOG]: \"Done!\" \n[LOG]: \"Use enum keyword: Total time = 2.219400003194809s, Number of trials: 5000000\" \n[LOG]: \"Use const enum keyword: Total time = 2.296300001144409s, Number of trials: 5000000\" \n[LOG]: \"Use string union: Total time = 2.303600000649691s, Number of trials: 5000000\" \n[LOG]: \"Done!\" \n[LOG]: \"Use enum keyword: Total time = 2.328300001323223s, Number of trials: 5000000\" \n[LOG]: \"Use const enum keyword: Total time = 2.288400000244379s, Number of trials: 5000000\" \n[LOG]: \"Use string union: Total time = 2.304799998611212s, Number of trials: 5000000\" \n[LOG]: \"Done!\" \n```\n\n## 안전성 Safety\n\nenum, string union type 모두 컴파일러가 잘못된 값의 대입을 막아준다.\n\nThe compiler prevents the developer from assigning incorrect values to both enum and string union type.\n\n```typescript\n// enum.\n\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\nfunction printColor(color: Color) {\n    console.log(color);\n}\n\nprintColor(Color.Red); // OK.\nprintColor(Color.Black); // Compile error.\n```\n\n```typescript\n// string union type.\n\ntype Color = 'Red' | 'Green' | 'Blue';\n\nfunction printColor(color: Color) {\n    console.log(color);\n}\n\nprintColor('Red'); // OK.\nprintColor('Black'); // Compile error.\n```\n\n다만 enum의 경우 아래와 같이 **정수값**을 직접 대입하는 경우 **컴파일러가 체크해주지 못하는 이슈가 있다.**\n\nHowever, in the case of enum, there is an issue that the compiler cannot check if we directly assign **integer value** to enum as shown below.\n\n```typescript\n// enum.\n\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\nfunction printColor(color: Color) {\n    console.log(color);\n}\n\nprintColor(0); // OK.\nprintColor(4); // OK. (Not compile error!)\n```\n\n## 편의성 Convenience\n\nenum, string union type을 사용하다 보면 값들의 **배열**이 필요하거나 값들을 가지고 **루프**를 돌아야 할 때가 종종 있다.  \n(ex. 아래와 같이 값들을 쭉 돌면서 React component들을 자동 생성하는 경우)\n\nWhen using enum and string union types, we often need to create an **array** of values or iterate those values.  \n(ex. Automatically creating React components by iterating the elements)\n\n```typescript\nconst ColorButtons = () => {\n    const colorNames = ...; // ['Red', 'Green', 'Blue'].\n\n    return (\n        <div>\n            {colorNames.map(color => <button>Select {color}</button>)}\n        </div>\n    );\n}\n```\n\nenum의 경우 내부적으로 생성하는 객체를 이용한 아래와 같은 [트릭](https://stackoverflow.com/questions/39372804/how-can-i-loop-through-enum-values-for-display-in-radio-buttons)이 존재한다.  \n(const enum은 이것이 불가능하다.)\n\nIn the case of enum, we have the following [trick](https://stackoverflow.com/questions/39372804/how-can-i-loop-through-enum-values-for-display-in-radio-buttons) which uses internally created object.  \n(We can't use this trick for const enum.)\n\n```typescript\n// enum.\n\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\n// Actual value of color is...\n// {\n//     '0': 'Red',\n//     '1': 'Green',\n//     '2': 'Blue',\n//     'Red': 0,\n//     'Green': 1,\n//     'Blue': 2\n// }\n// Trick: Check whether each key is not convertible to number (ex. 'Red': Not convertible, '0': Convertible)\nfor (let color in Color) {\n    if (isNaN(Number(color))) {\n        console.log(color); // Prints 'Red', 'Green', and 'Blue'.\n    }\n}\n```\n\nstring union type의 경우 배열을 먼저 만들고 배열로 자료형을 생성할 수 있어, 이런 경우에 좀 더 **간편하고 직관적**으로 보인다.\n\nIt seems that string union type looks more **simple and intuitive** in this case, since we can create an array first and then generate the type from that array.\n\n```typescript\n// string union type.\n\n// Create an array first, and extract the type from it.\nconst colorNames = ['Red', 'Green', 'Blue'] as const;\ntype Color = typeof colorNames[number]; // Color = 'Red' | 'Green' | 'Blue'.\n\ncolorNames.forEach(color => {\n    console.log(color); // Prints 'Red', 'Green', and 'Blue'.\n});\n```\n\n## 확장성 Extensibility\n\nenum의 경우 기존의 자료형을 확장하여 더 큰 자료형을 만드는 것은 자연스럽게 되지 않는다.\n아래와 같이 union type을 활용할 수는 있으나, 이름이 같은 값이 있으면 처리가 복잡해진다.\n\nIn the case of enums, it is not easy to extend it to create a wider data type.\nYou can use the union type as shown below, but if there are values with the same name, it becomes complicated to handle.\n\n```typescript\n// enum.\n\nenum Color1 {\n    Red,\n    Green,\n    Blue\n}\n\nenum Color2 {\n    Blue,\n    Black\n}\n\ntype AllColor = Color1 | Color2;\n\nconst x: AllColor = Color1.Blue;\nconst y: AllColor = Color2.Blue;\n\nconsole.log(x === y); // false.\n```\n\nstring union type의 경우 자연스럽게 합집합이 된다.\n\nWe can easily create the union set of the string union types.\n\n```typescript\n// string union type.\n\ntype Color1 = 'Red' | 'Green' | 'Blue';\ntype Color2 = 'Blue' | 'Black';\n\ntype AllColor = Color1 | Color2; // 'Red' | 'Green' | 'Blue' | 'Black'.\n\nconst x: AllColor = 'Blue';\nconst y: AllColor = 'Black';\n```\n\n## 디버깅 Debugging\n\nenum의 각 값들은 (값을 `enum Color { Red = 'Red' }` 이런 식으로 string으로 따로 지정하지 않았을 경우) C++처럼 내부적으로 정수값을 가진다.\n\n따라서, (C++에서 gdb 쓸 때처럼) 브라우저 디버거에서 breakpoint를 걸고 변수의 값을 조사할 경우, enum으로 만든 변수들은 값이 정수로 찍히기 때문에 이게 enum에서 어떤 거에 해당하는지 알아내는 데에 어려움이 있다.\n\nWhen each value is not mapped a string (ex. `enum Color { Red = 'Red' }`), it has an integer value internally like in C++.\n\nTherefore, when you set a breakpoint in the browser debugger and examine the value of a variable (like when using gdb in C++), it is difficult to find out which enum corresponds to because the values are printed as integers.\n\n```typescript\n// enum.\n\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\nconst x = Color.Red;\n\nmyFancyFunction(x); // In the debugger: x = 0.\n```\n\nstring union type은 이 부분에서 좀 더 유리하다.\n\nThe string union type is more advantageous in this case.\n\n```typescript\n// string union type.\n\ntype Color = 'Red' | 'Green' | 'Blue';\n\nconst x: Color = 'Red';\n\nmyFancyFunction(x); // In the debugger: x = 'Red'.\n```\n\n## 번들링 Bundling\n\nWebpack, Rollup 등의 번들러들은 사용되지 않은 (i.e import되지 않은) 코드들을 제거하는 [tree shaking](https://webpack.js.org/guides/tree-shaking/) 기능을 제공한다.\n이 기능은 번들(결과물 자바스크립트 파일)의 사이즈를 줄여서 로딩 속도 개선 등의 장점을 준다.\n\n그런데 enum의 경우는 [**tree shaking이 되지 않는 이슈**](https://engineering.linecorp.com/ko/blog/typescript-enum-tree-shaking/)가 있다.\n\n예를 들어, 아래와 같은 두 타입스크립트 파일이 있다고 하자.\n\nBundlers such as Webpack and Rollup provide [tree shaking](https://webpack.js.org/guides/tree-shaking/) that removes unused (i.e. not imported) codes.\nThis feature reduces the size of the bundle (result JavaScript file), so we can gain some advantages such as improvement of the loading speed.\n\nHowever, there is an issue about **tree shaking** in bundling enum.\n\nFor example, let's say we have the following two TypeScript files:\n\n(1) Fancy.ts\n\n```typescript\nexport enum Color1 {\n    Red,\n    Green,\n    Blue\n}\n\nexport type Color2 = 'Red' | 'Green' | 'Blue';\n\nexport const color3Names = ['Red', 'Green', 'Blue'] as const;\nexport type Color3 = typeof color3Names[number];\n\nexport function foo() {\n    console.log(1);\n}\n\nexport function bar() {\n    console.log(2);\n}\n```\n\n(2) index.ts (Main entry)\n\n```typescript\nimport { foo } from './Fancy';\n\nfoo();\n```\n\nWebpack으로 이 두 파일을 (production mode로) 빌드할 경우 아래와 같은 자바스크립트 파일이 나온다.\n\nIf you build these two files with Webpack (in production mode), the following JavaScript files are generated.\n\n```javascript\n!function(){\"use strict\";var e;!function(e){e[e.Red=0]=\"Red\",e[e.Green=1]=\"Green\",e[e.Blue=2]=\"Blue\"}(e||(e={})),console.log(1)}();\n```\n\n보기 좋게 정리하면 아래와 같다.\n\nPrettifying it gives the following code.\n\n```javascript\n!function() {\n    \"use strict\";\n    var e;\n    !function(e) {\n        e[e.Red = 0] = \"Red\",\n        e[e.Green = 1] = \"Green\",\n        e[e.Blue = 2] = \"Blue\"\n    }(e||(e={})), console.log(1)\n}();\n```\n\nimport하여 사용한 foo를 제외하고 color3Names, bar는 번들에 포함되지 않았다\n하지만 Color1는 사용하지 않았음에도 번들에 여전히 남아있는 것을 알 수 있다.\n\n이런 문제가 발생하는 이유는, 타입스크립트 enum은 함수를 만들고 그 자리에서 호출하는 자바스크립트 코드([IIFE](https://developer.mozilla.org/ko/docs/Glossary/IIFE) 패턴)로 변환이 되는데, Webpack이 이 코드가 side effect이 있는지 없는지 확신하지 못하여 번들에서 제외시키지 못하는 것으로 추측한다.\n\nExcept for foo that was imported and used, color3Names and bar were not included in the bundle.\nHowever, you can see that Color1 is still included in the bundle even though it has not been used.\n\nThe reason this problem occurs is that TypeScript enums are converted into JavaScript code ([IIFE](https://developer.mozilla.org/en/docs/Glossary/IIFE) pattern) that creates functions and calls them on the spot.\nWe think that the reason is that Webpack can't determine whether such code have side effects or not.\n\n```typescript\n// Original TypeScript code.\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\n// Result JavaScript code.\nvar Color;\n(function (Color) {\n    Color[Color[\"Red\"] = 0] = \"Red\";\n    Color[Color[\"Green\"] = 1] = \"Green\";\n    Color[Color[\"Blue\"] = 2] = \"Blue\";\n})(Color || (Color = {}));\n```\n\n## 대체 구현 Alternatives\n\n기본적인 enum의 경우, string union type으로 대체하여 사용할 수 있다.\n\nWhen we use enum in basic usage, we can replace it with a string union type.\n\n```typescript\nenum Color {\n    Red,\n    Green,\n    Blue\n}\n\n// Alternative.\ntype Color = 'Red' | 'Green' | 'Blue';\n```\n\n만약 값들의 배열이 필요한 경우, 위에서 언급했듯이 `as const`([const assertion](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions))을 사용하면 된다.\n\nIf we need an array of values, we can use `as const` ([const assertion](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions)) as mentioned above.\n\n```typescript\nconst colorNames = ['Red', 'Green', 'Blue'] as const;\ntype Color = typeof colorNames[number]; // 'Red' | 'Green' | 'Blue'.\n```\n\nenum처럼 이름과 값을 매핑시키고 싶은 경우, object에 const assertion을 사용하면 된다.\n\nIf we want to map names to values, we can use const assertions on objects.\n\n```typescript\nenum Color {\n    Red = 'MyRed',\n    Green = 'MyGreen',\n    Blue = 'MyBlue'\n}\n\n// Alternative.\nconst colorMap = {\n    Red: 'MyRed',\n    Green: 'MyGreen',\n    Blue: 'MyBlue'\n} as const;\n\ntype Color = keyof typeof colorMap; // 'Red' | 'Green' | 'Blue'.\n```\n\n## References\n\n몇몇 링크들은 위 글에도 포함되어 있다.\n\nSome links are also mentioned in this article.\n\n- <https://code-masterjung.tistory.com/114>\n- <https://engineering.linecorp.com/ko/blog/typescript-enum-tree-shaking/>\n- <https://stackoverflow.com/questions/40275832/typescript-has-unions-so-are-enums-redundant>\n- <https://www.typescriptlang.org/docs/handbook/enums.html#objects-vs-enums>\n"},9758:function(n){n.exports="타입스크립트에서 string의 union type을 enum과 유사한 용도로 쓸 수 있다.\n\nIn TypeScript, we can use the union type of string for a similar purpose to enum.\n\n```typescript\ntype Category = 'Computer' | 'Music' | 'Misc';\n\nconst currentCategory: Category = 'Computer';\n```\n\n**Const assertion**을 활용하면, string의 배열을 만들고 그 배열에서 union type을 추출하는 방식으로 union type과 type의 배열을 동시에 얻을 수가 있다.\n\nUsing the **const assertion**, we can obtain a union type and an array of types at the same time by creating an array of strings and extracting the union type from the array.\n\n```typescript\nconst allCategories = ['Computer', 'Music', 'Misc'] as const; // Const assertion.\ntype Category = (typeof allCategories)[number]; // 'Computer' | 'Music' | 'Misc'.\n\nconst currentCategory: Category = 'Computer';\n\nallCategories.forEach(category => {\n    console.log(category);\n});\n```\n\n이 블로그에서도 카테고리, 테마 등의 타입들을 구현할 때 이 방법을 사용하였다.\n\nThis blog also used this method when implementing types such as categories and themes.\n"},146:function(n){n.exports="윈도우의 WSL2 위에 WSLg 기능을 설치하면, VcXsrv 등의 프로그램 없이도 리눅스용 GUI 프로그램들을 실행할 수 있다.\n\nIf we install WSLg on the Windows WSL2, we can run GUI programs for Linux without programs such as VcXsrv.\n\n```bash\n$ wsl --update\n$ wsl --shutdown\n$ wsl\n```\n\n종종 cannot open display (또는 couldn't open display) 등의 에러가 뜨며 GUI 프로그램이 실행되지 않는 경우가 있다.\n이 때는 아래 사항들을 체크해 보면 된다.\n\nSometimes we get an error such as cannot open display (or couldn't open display) appears and the GUI program may not run.\nIn this case, we can try the following methods.\n\n(1) .wslconfig\n\n- PowerShell에서 `notepad $env:USERPROFILE/.wslconfig` 입력\n- 만약 .wslconfig 파일이 있으면 guiApplication이 false인지 확인하고 false면 주석처리\n- .wslconfig 파일이 없으면 신경 안 써도 됨\n<br/><br/>\n- Run `notepad $env:USERPROFILE/.wslconfig` on PowerShell\n- If .wslconfig exists, check whether guiApplication is false. If it is false, comment it out.\n- If .wslconfig doesn't exist, you don't have to do anything\n\n(2) DISPLAY\n\n- wsl에서 `echo $DISPLAY`를 실행했을 때 `:0`이 출력되는지 확인\n- 출력되지 않는다면 `~/.bashrc` 등에 `export $DISPLAY=...` 등 DISPLAY를 덮어씌우는 문장이 있는지 확인\n<br/><br/>\n- Run `echo $DISPLAY` on wsl and check whether the output is `:0`\n- If not, open `~/.bashrc` and check whether there are lines which overrides DISPLAY (ex. `export $DISPLAY=...`)\n\n(3) .X11-unix\n\n- `sudo ln -s /mnt/wslg/.X11-unix /tmp/.X11-unix` 실행\n<br/><br/>\n- Run `sudo ln -s /mnt/wslg/.X11-unix /tmp/.X11-unix`\n\n(4) XDG_RUNTIME_DIR\n\n- 도커 등을 설치하려고 systemd를 만지면 이 증상이 발생할 수 있다.\n- wsl에서 `echo $XDG_RUNTIME_DIR`을 실행했을 때 `/mnt/wslg/runtime-dir`이 출력되는지 확인\n- 출력되지 않거나 값이 다르다면, `~/.bashrc`에 `export $XDG_RUNTIME_DIR=/mnt/wslg/runtime-dir` 적어주기\n<br/><br/>\n- If you setup systemd for installing the programs such as Docker, you can get this symptom.\n- Run `echo $XDG_RUNTIME_DIR` on wsl and check whether the output is `/mnt/wslg/runtime-dir`\n- If not, add `export $XDG_RUNTIME_DIR=/mnt/wslg/runtime-dir` on `~/.bashrc`\n"},8862:function(n){n.exports="환영합니다! Welcome!\n"}}]);