{"pageProps":{"post":{"title":"Error handling in React.js","time":1609200000000,"category":"Computer","content":"[리액트 라우터](https://reactrouter.com/)를 사용할 때, 만약 웹페이지 내부에서 예외가 발생하면 라우팅이 정상적으로 작동하지 않는 경우가 있다. 라우팅을 방해하지 않으면서 예외가 콘솔에 출력되게\n하려면, 에러를 처리하는 컴포넌트를 만들어서 각 경로(route)에 해당하는 컴포넌트를 덮어주면 된다.\n\nWhen using [React Router](https://reactrouter.com/), routing may not work properly if an exception occurs inside a web\npage. If you want the exceptions to be printed on the console without interfering routing, you can create an error\nhandler and wrap the components corresponding to each route.\n\n```jsx\n{path: '/menu', element: <MenuPage/>}\n=> {path: '/menu', element: <ErrorHandler><MenuPage/></ErrorHandler>}\n```\n\n[리액트](https://reactjs.org/)에서 에러 핸들러는 다음과 같이 만들면 된다.\n([타입스크립트](https://www.typescriptlang.org/)로 작성하였다.)\n\nIn [React](https://reactjs.org/), you can create an error handler like this:\n(The code is written in [TypeScript](https://www.typescriptlang.org/).)\n\n```typescript jsx\nimport {Component, ErrorInfo, ReactNode} from 'react';\n\nclass ErrorHandler extends Component<{ children: ReactNode }> {\n    constructor({children = null}) {\n        super({children});\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        // Print the exception.\n        console.error(error?.toString());\n        console.error(errorInfo?.componentStack);\n    }\n\n    render() {\n        // Render the component.\n        return this.props.children;\n    }\n}\n```\n\n에러 발생시에 에러 페이지 등 다른 컴포넌트를 렌더링하고 싶다면, 아래와 같이 하면 된다.\n\nIf you want to render other components such as error pages when an error occurs, you can do as follows.\n\n```typescript jsx\nimport {Component, ErrorInfo, ReactNode} from 'react';\n\nclass ErrorHandler extends Component<{ children: ReactNode }, { hasError: boolean }> {\n    constructor({children = null}) {\n        super({children});\n        // hasError = true when we have an exception.\n        this.state = {hasError: false};\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        this.setState({hasError: true}, () => {\n            console.error(error?.toString());\n            console.error(errorInfo?.componentStack);\n        });\n    }\n\n    render() {\n        // If we have an exception, render <ErrorPage/> instead.\n        return this.state.hasError ? <ErrorPage/> : this.props.children;\n    }\n}\n```\n"}},"__N_SSG":true}