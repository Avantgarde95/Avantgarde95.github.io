{"pageProps":{"post":{"title":"Routing in GitHub Pages","time":1609200000000,"category":"Computer","content":"[깃허브](https://github.com/)에서는 [깃허브 페이지](https://pages.github.com/)를 통하여 웹사이트를 호스팅하는 기능을 제공한다. 이\n때 [React Router](https://reactrouter.com/) 등의 라우팅 라이브러리를 사용하여 웹사이트가 마치 여러 개의 페이지로 이루어진 것처럼 하위 경로들을 만들어주고 싶다고 하자\n([SPA: Single Page Application](https://ko.wikipedia.org/wiki/싱글_페이지_애플리케이션)).\n\nIn [GitHub](https://github.com/), we can host a website through\n[GitHub Pages](https://pages.github.com/). Suppose that you want to create the sub-paths as if your website consists of\nseveral pages\n([SPA: Single Page Application](https://en.wikipedia.org/wiki/single_page_application))\nusing a routing library such as [React Router](https://reactrouter.com/).\n\n```\nWebpage: user.github.io\n\nuser.github.io/about -> Show the 'About' component.\nuser.github.io/music -> Show the 'Musics' component.\nuser.github.io/project -> Show the 'Projects' component.\n```\n\n하지만 깃허브 페이지는 SPA를 지원하지 않는다. 하위 경로를 요청시 `index.html`을 반환하지 못하고 404 에러 페이지를 반환한다.\n\nHowever, GitHub pages do not support SPA. When requesting a sub-path, the website returns a 404 error page instead\nof `index.html`.\n\n![GitHub404](https://imgur.com/eA72EXd.png)\n\n해결법 중 하나는 해쉬 기반 라우팅을 사용하는 것이다. 리액트 라우터에서는 `<HashRouter/>`를 사용해주면 된다.\n\nOne of the solutions is to use hash-based routing. In React router, you can use `<HashRouter/>`.\n\n```\nWebpage: user.github.io\n\nuser.github.io/#about -> Show the 'About' component.\nuser.github.io/#music -> Show the 'Musics' component.\nuser.github.io/#project -> Show the 'Projects' component.\n```\n\n만약 해쉬 기반 라우팅을 사용하고 싶지 않다면, 404 페이지를 이용한 트릭을 사용하면 된다\n([spa-github-pages](https://github.com/rafgraph/spa-github-pages)). 404 페이지에 스크립트를 삽입하여, 하위 경로에 접속시 주소(`/...`)를 파라미터 형태(\nex. `/?p=/...`로 바꾸어 주는 아이디어이다. 저장소에 `404.html`을 추가하고, 다음과 같은 자바스크립트 코드를 추가한다.\n\nIf you don't want to use hash-based routing, you can use the 404 page trick\n([spa-github-pages](https://github.com/rafgraph/spa-github-pages)). It is an idea to insert a script into the 404 page\nand change the address (`/...`)\nto the parameter form (ex. `/?p=/...`) when accessing the sub-path. Add `404.html` to the repository, and add the\nfollowing JavaScript code.\n\n```javascript\nvar segmentCount = 0;\nvar l = window.location;\n\nl.replace(\n    l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +\n    l.pathname.split('/').slice(0, 1 + segmentCount).join('/') + '/?p=/' +\n    l.pathname.slice(1).split('/').slice(segmentCount).join('/').replace(/&/g, '~and~') +\n    (l.search ? '&q=' + l.search.slice(1).replace(/&/g, '~and~') : '') +\n    l.hash\n);\n```\n\n이 때 웹사이트의 기본 주소가 `.../github.io` 형태이면 `segmentCount = 0`,\n`.../github.io/xxx` 형태이면 `segmentCount = 1`로 설정하면 된다.\n\nIf the base address of the website is in the form of `.../github.io`, set `segmentCount = 0`. If the base address of the\nwebsite is in the form of `.../github.io/xxx`, set `segmentCount = 1`.\n\n그리고 `index.html`에 다음과 같은 자바스크립트 코드를 추가한다.\n\nAnd add the following JavaScript code in `index.html`.\n\n```javascript\n(function (l) {\n    if (l.search) {\n        var q = {};\n\n        l.search.slice(1).split('&').forEach(function (v) {\n            var a = v.split('=');\n            q[a[0]] = a.slice(1).join('=').replace(/~and~/g, '&');\n        });\n\n        if (q.p !== undefined) {\n            window.history.replaceState(null, null,\n                l.pathname.slice(0, -1) + (q.p || '') +\n                (q.q ? ('?' + q.q) : '') +\n                l.hash\n            );\n        }\n    }\n}(window.location))\n```\n\n이 방법을 쓰면 깃허브 페이지에서도 다음과 같은 라우팅이 가능해진다. 다만 이 방법을 사용하면 웹사이트의\n[검색 엔진 최적화](https://ko.wikipedia.org/wiki/검색_엔진_최적화)\n가 잘 되지 않을 수 있다.\n\nUsing this method, routing like the following becomes possible on the GitHub page. However, if you use this method, the\n[Search Engine Optimization](https://en.wikipedia.org/wiki/search_engine_optimization)\nof the website may not work well.\n\n```\nWebpage: user.github.io\n\nuser.github.io/about -> Show the 'About' component.\nuser.github.io/music -> Show the 'Musics' component.\nuser.github.io/project -> Show the 'Projects' component.\n```\n"}},"__N_SSG":true}