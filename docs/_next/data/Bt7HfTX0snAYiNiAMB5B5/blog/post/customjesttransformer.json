{"pageProps":{"output":{"title":"Custom Jest transformer","time":1634601600000,"category":"Computer","content":"<p><a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://webpack.js.org/\">Webpack</a> 등의 번들러를 이용하여 프론트엔드 코드를 작성할 때,\nurl-loader, file-loader, <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://react-svgr.com/docs/webpack/\">@svgr/webpack</a>, Webpack 5의 <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://webpack.js.org/guides/asset-modules/\">asset modules</a> 등의 기능들을 이용하여 아래와 같이 이미지를 마치 JavaScript/TypeScript처럼 import하는 코드를 작성할 수 있다.</p>\n<p>When writing front-end code using a bundler, you can write code that imports images like JavaScript/TypeScript using the functions such as <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://webpack.js.org/\">Webpack</a>,\nurl-loader, file-loader, <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://react-svgr.com/docs/webpack/\">@svgr/webpack</a>, and <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://webpack.js.org/guides\">asset modules</a> in Webpack 5.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Apple</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;image/Apple.png&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">MyImage</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{Apple}/</span>&gt;</span></span>;</span>\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://jestjs.io/\">Jest</a>를 사용하여 프론트엔드 코드의 단위 테스트를 작성하고 실행할 때, 이들을 처리하지 못하여 오류가 나는 경우가 있다.\n이는 Jest가 Webpack 세팅과는 별개의 환경에서 동작하기 때문이다.</p>\n<p>간단한 해결방법 중 하나는, 아래와 같이 해당 파일들을 더미값으로 바꿔주는 <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://jestjs.io/docs/next/code-transformation\">custom transformer</a>를 작성해주는 것이다.\n예컨대, png, jpg 등의 리소스들을 더미 URL로 바꾸고자 한다면, 아래와 같이 transformer를 하나 제작해주고 Jest config에서 해당 transformer를 매핑해주면 된다.</p>\n<p>When writing and executing unit tests of front-end code using <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://jestjs.io/\">Jest</a>, there are cases where an error occurs while processing those resources.\nThis is because Jest operates in a separate environment from Webpack settings.</p>\n<p>One of the simple solutions is to write a <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://jestjs.io/docs/next/code-transformation\">custom transformer</a> that converts the files into dummy values as shown below.\nFor example, if you want to transform resources such as png, jpg, etc. to a dummy URL, create a transformer as shown below and map the transformer in Jest config.</p>\n<p><strong>jestURLtransformer.js</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-comment\">// Convert the resource to the dummy URL.</span>\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;module.exports = \\&#x27;Pikachu.png\\&#x27;;&#x27;</span>;\n    }\n};</span>\n</code></pre>\n<p><strong>jest.config.js</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    ...\n    <span class=\"hljs-attr\">transform</span>: {\n        <span class=\"hljs-string\">&#x27;^.+\\\\.(ts|tsx)$&#x27;</span>: [<span class=\"hljs-string\">&#x27;ts-jest&#x27;</span>],\n        <span class=\"hljs-string\">&#x27;^.+\\\\.(png|jpg|jpeg)$&#x27;</span>: [<span class=\"hljs-string\">`<span class=\"hljs-subst\">${configPath}</span>/jestURLtransformer.js`</span>)]\n    }\n};</span>\n</code></pre>\n<p>svg 등의 이미지들을 더미 React 컴포넌트로 바꾸고자 한다면, 아래와 같이 transformer를 하나 제작해주고 Jest config에서 해당 transformer를 매핑해주면 된다.</p>\n<p>If you want to transform resources such as svg to a dummy React component, create a transformer as shown below and map the transformer in the jest config.</p>\n<p><strong>jestComponentTransformer.js</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-comment\">// Convert the resource to the dummy React component.</span>\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;module.exports = () =&gt; \\&#x27;Pikachu\\&#x27;;&#x27;</span>;\n    }\n};</span>\n</code></pre>\n<p><strong>jest.config.js</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    ...\n    <span class=\"hljs-attr\">transform</span>: {\n        <span class=\"hljs-string\">&#x27;^.+\\\\.(ts|tsx)$&#x27;</span>: [<span class=\"hljs-string\">&#x27;ts-jest&#x27;</span>],\n        <span class=\"hljs-string\">&#x27;^.+\\\\.(png|jpg|jpeg)$&#x27;</span>: [<span class=\"hljs-string\">`<span class=\"hljs-subst\">${configPath}</span>/jestURLtransformer.js`</span>)],\n        <span class=\"hljs-string\">&#x27;^.+\\\\.svg$&#x27;</span>: [<span class=\"hljs-string\">`<span class=\"hljs-subst\">${configPath}</span>/jestComponentTransformer.js`</span>)]\n    }\n};</span>\n</code></pre>\n"}},"__N_SSG":true}