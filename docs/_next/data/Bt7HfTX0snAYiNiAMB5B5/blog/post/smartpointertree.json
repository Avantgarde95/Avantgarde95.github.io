{"pageProps":{"output":{"title":"Creating a tree using the smart pointer","time":1618185600000,"category":"Computer","content":"<p>C++에서 트리를 만들때, 스마트 포인터 <code>std::shared_ptr</code>를 활용하면 자식 노드의 메모리 해제를 직접 해주지 않아도 될 뿐만 아니라 여러 트리가 한 노드를 참조하는 상황에서도 알아서 메모리가 해제되도록 할 수 있다.</p>\n<p>When creating a tree in C++, if you use the smart pointer <code>std::shared_ptr</code>, you don&#39;t have to release the memory of each child node directly, and you can let the program to automatically release the memory even when multiple trees refer to one node.</p>\n<pre><code class=\"language-cpp\"><span class=\"hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sstream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-built_in\">Node</span>(<span class=\"hljs-type\">const</span> std::string&amp; name): <span class=\"hljs-built_in\">m_name</span>(name) {\n        <span class=\"hljs-comment\">// Do nothing.</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> level = <span class=\"hljs-number\">0</span>)</span> </span>{\n        <span class=\"hljs-built_in\">printThis</span>(level);\n        <span class=\"hljs-built_in\">printChilds</span>(level);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">addChild</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::shared_ptr&lt;Node&gt;&amp; child)</span> </span>{\n        m_childs.<span class=\"hljs-built_in\">push_back</span>(child);\n    }\n\n<span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printThis</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> level)</span> </span>{\n        std::stringstream ss;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; level - <span class=\"hljs-number\">1</span>; i++) {\n            ss &lt;&lt; <span class=\"hljs-string\">&quot;   &quot;</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (level &gt; <span class=\"hljs-number\">0</span>) {\n            ss &lt;&lt; <span class=\"hljs-string\">&quot;|- &quot;</span>;\n        }\n\n        ss &lt;&lt; m_name &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        std::cout &lt;&lt; ss.<span class=\"hljs-built_in\">str</span>();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printChilds</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> level)</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> child: m_childs) {\n            child-&gt;<span class=\"hljs-built_in\">print</span>(level + <span class=\"hljs-number\">1</span>);\n        }\n    }\n\n<span class=\"hljs-keyword\">private</span>:\n    std::string m_name;\n    std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; m_childs;\n};</span>\n</code></pre>\n<p>아래와 같이 트리 두 개를 만들어 보자. 두 트리는 노드 4를 공유한다.</p>\n<p>Let&#39;s create two trees as shown below. The trees share node 4.</p>\n<p><strong>Tree</strong></p>\n<pre><code><pre class=\"hljs\">Tree 1: 0 - 1 - 2\n            |\n            3 - 4 - 5\n                |\nTree 2: 6 ------+\n                |\n                7 - 8\n                |\n                9 - 10 - 11</pre>\n</code></pre>\n<p><strong>Code</strong></p>\n<pre><code class=\"language-cpp\"><span class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; nodes;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">11</span>; i++) {\n        nodes.<span class=\"hljs-built_in\">push_back</span>(std::<span class=\"hljs-built_in\">make_shared</span>&lt;Node&gt;(std::<span class=\"hljs-built_in\">to_string</span>(i)));\n    }\n\n    <span class=\"hljs-comment\">// Tree 1.</span>\n    nodes[<span class=\"hljs-number\">0</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">1</span>]);\n    nodes[<span class=\"hljs-number\">0</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">3</span>]);\n    nodes[<span class=\"hljs-number\">1</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">2</span>]);\n    nodes[<span class=\"hljs-number\">3</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">4</span>]);\n    nodes[<span class=\"hljs-number\">4</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">5</span>]);\n\n    <span class=\"hljs-comment\">// Tree 2.</span>\n    nodes[<span class=\"hljs-number\">6</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">4</span>]);\n    nodes[<span class=\"hljs-number\">6</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">7</span>]);\n    nodes[<span class=\"hljs-number\">6</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">9</span>]);\n    nodes[<span class=\"hljs-number\">7</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">8</span>]);\n    nodes[<span class=\"hljs-number\">9</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">10</span>]);\n    nodes[<span class=\"hljs-number\">10</span>]-&gt;<span class=\"hljs-built_in\">addChild</span>(nodes[<span class=\"hljs-number\">11</span>]);\n\n    nodes[<span class=\"hljs-number\">0</span>]-&gt;<span class=\"hljs-built_in\">print</span>();\n    nodes[<span class=\"hljs-number\">6</span>]-&gt;<span class=\"hljs-built_in\">print</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</span>\n</code></pre>\n<p>프로그램은 아래와 같은 결과를 출력할 것이다.\n<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://valgrind.org/\">Valgrind</a>를 사용하여 메모리 누수가 없음을 확인할 수 있다.</p>\n<p>The program will print the following output.\nYou can use <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://valgrind.org/\">Valgrind</a> to confirm that there is no memory leak.</p>\n<pre><code><pre class=\"hljs\">0\n|- 1\n   |- 2\n|- 3\n   |- 4\n      |- 5\n6\n|- 4\n   |- 5\n|- 7\n   |- 8\n|- 9\n   |- 10\n      |- 11</pre>\n</code></pre>\n"}},"__N_SSG":true}