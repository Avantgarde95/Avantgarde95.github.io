{"pageProps":{"post":{"key":"nextmismatch","title":"Server & client mismatch problem in Next.js","time":1663718400000,"category":"Computer","content":"이 웹사이트를 실행했을 때, 작동은 잘 되는 것 같은데 콘솔에 아래와 같은 에러 메시지들이 뜨는 문제가 있었다.\r\n\r\nWhen I run this website, it seems to work fine, but I got following error messages appearing on the console.\r\n\r\n```text\r\nUncaught Error: Minified React error #425; visit https://reactjs.org/docs/error-decoder.html?invariant=425 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n\r\nUncaught Error: Minified React error #418; visit https://reactjs.org/docs/error-decoder.html?invariant=418 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n\r\nUncaught Error: Minified React error #423; visit https://reactjs.org/docs/error-decoder.html?invariant=423 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n```\r\n\r\n위 에러 메시지들에 나온 링크를 방문해보면 아래와 같은 메시지들이 나온다.\r\n\r\nIf you visit the links in these error messages, you will see the following messages.\r\n\r\n- Text content does not match server-rendered HTML.\r\n- Hydration failed because the initial UI does not match what was rendered on the server.\r\n- There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.\r\n\r\n이 웹사이트는 Next.js로 정적 사이트 생성(SSG - Static Site Generation)을 하여 만들었다.\r\nNext.js로 미리 생성한 HTML을 일단 유저에게 보여주고, 그 후에 React로 hydration & CSR(Client-side Rendering)을 하는 방식이다.\r\n따라서, 위의 메시지들은 미리 렌더링한 HTML과 클라이언트에서 렌더링한 HTML 간에 내용물이 불일치한다는 것을 의미한다.\r\n이 문제는 SSR 뿐만 아니라 SSR 상황에서도 동일하게 발생한다.\r\n\r\nI created this website by using SSG (Static Site Generation) with Next.js\r\nIt works by showing the pre-generated HTML to the user first, and performing hydration & CSR (Client-side Rendering) with React.\r\nTherefore, the above messages mean that there is a content mismatch between the pre-rendered HTML and the client-rendered HTML.\r\nThis problem can occur not only SSG but also SSR, too.\r\n\r\n원인은 두 곳에 있었다.\r\n하나는 페이지 상단의 시계 UI이다.\r\n\r\nThere were two reasons.\r\nOne is the clock UI at the top of the page.\r\n\r\n```typescript\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function useNow() {\r\n  const [now, setNow] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setNow(new Date());\r\n    }, 1000 * 10);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    year: now.getFullYear(),\r\n    month: now.getMonth() + 1,\r\n    monthDay: now.getDate(),\r\n    hour: now.getHours(),\r\n    minute: now.getMinutes(),\r\n    second: now.getSeconds(),\r\n  };\r\n}\r\n```\r\n\r\n시계 기능을 구현하기 위해 위와 같은 custom hook을 작성했었다.\r\n그런데 `const [now, setNow] = useState(new Date());`에서 `new Date()`의 값은 서버 렌더링 시와, 클라이언트 렌더링 시에 **서로 다르다**.\r\n이로 인하여 시계 텍스트가 두 상황에서 불일치하여 에러가 났던 것이다.\r\nCSR 전까지는 실제 시간을 사용하지 않고 더미 값을 쓰도록 하여 해결하였다.\r\n\r\nI wrote the above custom hook to implement the clock.\r\nHowever, in `const [now, setNow] = useState(new Date());`, the value of `new Date()` is **different** between server rendering and client rendering.\r\nThis inconsistency of the clock text caused the error.\r\nI solved this problem by using a dummy value until we perform CSR.\r\n\r\n다만 이러면 초반에 시간이 더미 값으로 떠서 이상해 보이는 문제가 있다.\r\n적절한 로딩 UI를 부여하면 좀 낫지 않을까 한다.\r\n\r\nHowever, we get a problem that the user sees a dummy value at the beginning.\r\nWe may fix that problem by using appropriate loading UI.\r\n\r\n```typescript\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface Time {\r\n  year: number;\r\n  month: number;\r\n  monthDay: number;\r\n  hour: number;\r\n  minute: number;\r\n  second: number;\r\n}\r\n\r\nexport default function useNow(): Time {\r\n  // If we use new Date() at here, server HTML and client HTML won't match.\r\n  // So we don't compute date before useEffect().\r\n  const [now, setNow] = useState<Date | null>(null);\r\n\r\n  useEffect(() => {\r\n    setNow(new Date());\r\n\r\n    const interval = setInterval(() => {\r\n      setNow(new Date());\r\n    }, 1000 * 10);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return now === null\r\n    ? {\r\n        year: 0,\r\n        month: 0,\r\n        monthDay: 0,\r\n        hour: 0,\r\n        minute: 0,\r\n        second: 0,\r\n      }\r\n    : {\r\n        year: now.getFullYear(),\r\n        month: now.getMonth() + 1,\r\n        monthDay: now.getDate(),\r\n        hour: now.getHours(),\r\n        minute: now.getMinutes(),\r\n        second: now.getSeconds(),\r\n      };\r\n}\r\n```\r\n\r\n다른 하나는 이 글처럼 코드를 렌더링 할 때 쓰는 react-syntax-highlighter 라이브러리이다.\r\n해당 라이브러리는 내부적으로 [Prism.js](https://prismjs.com/)(또는 [highlight.js](https://highlightjs.org/))를 호출한다.\r\n이들은 코드를 읽고 **DOM을 변경**하여 코드 하이라이팅을 한다.\r\n이것이 mismatch를 만들어낸 것으로 추정한다.\r\n\r\n이와 같은 상황에서 특정 동작을 클라이언트에서만 하도록 하고 싶으면, `useEffect()`를 활용할 수 있다.\r\n`useEffect()` 안의 코드는 항상 **클라이언트에서만 실행**된다.\r\n`useEffect()`가 처음 불리는 시점은 컴포넌트가 마운트된 이후, 즉 DOM이 생성된 이후이기 때문이다.\r\n\r\nThe other is the react-syntax-highlighter library used when rendering code like this article.\r\nThe library calls [Prism.js](https://prismjs.com/) (or [highlight.js](https://highlightjs.org/)) internally.\r\nThey read the code and **change the DOM** to highlight the code.\r\nIt seems that that behavior created mismatches.\r\n\r\nIn such a situation, if you want to make certain actions executed only for the client, you can use `useEffect()`.\r\nCode in `useEffect()` is always executed **only on the client**.\r\nThis is because the first time `useEffect()` is called is after the component is mounted i.e after the DOM is created.\r\n\r\n우선 아래와 같은 custom hook을 하나 만들었다.\r\n`isClient`는 클라이언트에서만 true이 된다.\r\n\r\nI created the following custom hook first.\r\n`isClient` can be true only on the client.\r\n\r\n```typescript\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function useClient() {\r\n  const [isClient, setClient] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setClient(true);\r\n  }, []);\r\n\r\n  return { isClient };\r\n}\r\n```\r\n\r\n이를 이용하여, 아래와 같이 CSR 전까지는 react-syntax-highlighter를 적용하지 않도록 하여 에러를 해결하였다.\r\n(가독성을 위해 일부 props는 생략하였다.)\r\n\r\nUsing this, I solved the errors by preventing the component from applying react-syntax-highlighter before starting CSR.\r\n(I omitted some props for readability.)\r\n\r\n```tsx\r\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\n\r\n...\r\n\r\nconst PostView = () => (\r\n  <ReactMarkdown\r\n    components={{\r\n      code: MarkdownCode,\r\n      a: MarkdownLink,\r\n      img: MarkdownImage,\r\n    }}\r\n  >\r\n    ...\r\n  </ReactMarkdown>\r\n);\r\n\r\n...\r\n\r\nconst MarkdownCode = () => {\r\n  const { isClient } = useClient();\r\n\r\n  ...\r\n\r\n  return isClient && ... ? (\r\n    <SyntaxHighlighter>\r\n      ...\r\n    </SyntaxHighlighter>\r\n  ) : (\r\n    <InlineCode>\r\n      ...\r\n    </InlineCode>\r\n  );\r\n};\r\n```\r\n"}},"__N_SSG":true}