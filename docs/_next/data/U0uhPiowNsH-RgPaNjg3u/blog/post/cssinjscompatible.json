{"pageProps":{"post":{"key":"cssinjscompatible","title":"Creating a component compatible to CSS-in-JS","time":1662595200000,"category":"Computer","content":"[styled-components](https://styled-components.com/), [Emotion](https://emotion.sh/) 등의 CSS-in-JS 라이브러리에서는 `styled`, `css` 등의 API를 제공하여 컴포넌트에 스타일을 입힐 수 있도록 한다.\n\nCSS-in-JS libraries such as [styled-components](https://styled-components.com/), [Emotion](https://emotion.sh/) provides APIs such as `styled`, `css` to style the components.\n\n```tsx\n// ex. styled-components, Emotion.\nconst MyButton = styled.button`\n  color: blue;\n`;\n\n// ex. Emotion.\nconst MyBox = () => (\n  <div\n    css={css`\n      color: red;\n    `}\n  >\n    Hello!\n  </div>\n);\n```\n\n우리가 만든 컴포넌트를 이 API들을 사용하여 스타일링할 수 있도록 하려면 어떻게 해야 할까?\n이 API들은 일반적으로 아래와 같이 작동한다.\n\n- className을 생성한다.\n- 페이지에 CSS 코드를 삽입한다.\n  - `<style>` 태그 안에 코드를 넣기, [CSSStyleSheet](https://developer.mozilla.org/ko/docs/Web/API/CSSStyleSheet)로 코드 넣기 등 여러 가지 방식이 있다.\n- 컴포넌트에 해당 className을 설정한다.\n\nHow can we make our component styleable using these APIs?\nThese APIs generally work like the following:\n\n- Create a className\n- Inject CSS code into the page\n  - There are several methods, such as putting the code inside `<style>` tag, registering the code using [CSSStyleSheet](https://developer.mozilla.org/en/docs/Web/API/CSSStyleSheet), etc.\n- Set className of the component\n\n![How CSS-in-JS libraries work](/image/css-in-js-work.png)\n\n따라서, 우리는 그냥 `className` props를 제공하면 된다.\n\nTherefore, we just need to provide `className` props.\n\n```tsx\ninterface ButtonProps {\n  className?: string;\n  label: string;\n  onClick: () => void;\n}\n\nconst Button = ({ className, label, onClick }) => (\n  <button className={className} onClick={onClick}>\n    {label}\n  </button>\n);\n```\n\n```tsx\nimport Button from \"...\";\n\nconst SubmitButton = styled(Button)`\n  color: red;\n`;\n\nconst CancelButton = () => (\n  <Button\n    css={css`\n      color: blue;\n    `}\n    ...\n  />\n);\n```\n"}},"__N_SSG":true}