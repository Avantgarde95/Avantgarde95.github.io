{"pageProps":{"output":{"key":"githubpagesrouting","title":"Routing in GitHub Pages","time":1609200000000,"category":"Computer","content":"<p><a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/\">깃허브</a>에서는 <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://pages.github.com/\">깃허브 페이지</a>를 통하여 웹사이트를 호스팅하는 기능을 제공한다. 이\n때 <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://reactrouter.com/\">React Router</a> 등의 라우팅 라이브러리를 사용하여 웹사이트가 마치 여러 개의 페이지로 이루어진 것처럼 하위 경로들을 만들어주고 싶다고 하자\n(<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80_%ED%8E%98%EC%9D%B4%EC%A7%80_%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\">SPA: Single Page Application</a>).</p>\n<p>In <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/\">GitHub</a>, we can host a website through\n<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://pages.github.com/\">GitHub Pages</a>. Suppose that you want to create the sub-paths as if your website consists of\nseveral pages\n(<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://en.wikipedia.org/wiki/single_page_application\">SPA: Single Page Application</a>)\nusing a routing library such as <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://reactrouter.com/\">React Router</a>.</p>\n<pre><code><pre class=\"hljs\">Webpage: user.github.io\n\nuser.github.io/about -> Show the 'About' component.\nuser.github.io/music -> Show the 'Musics' component.\nuser.github.io/project -> Show the 'Projects' component.</pre>\n</code></pre>\n<p>하지만 깃허브 페이지는 SPA를 지원하지 않는다. 하위 경로를 요청시 <code>index.html</code>을 반환하지 못하고 404 에러 페이지를 반환한다.</p>\n<p>However, GitHub pages do not support SPA. When requesting a sub-path, the website returns a 404 error page instead\nof <code>index.html</code>.</p>\n<p><img class=\"PostImage\" src=\"https://imgur.com/eA72EXd.png\" alt=\"GitHub404\"></p>\n<p>해결법 중 하나는 해쉬 기반 라우팅을 사용하는 것이다. 리액트 라우터에서는 <code>&lt;HashRouter/&gt;</code>를 사용해주면 된다.</p>\n<p>One of the solutions is to use hash-based routing. In React router, you can use <code>&lt;HashRouter/&gt;</code>.</p>\n<pre><code><pre class=\"hljs\">Webpage: user.github.io\n\nuser.github.io/#about -> Show the 'About' component.\nuser.github.io/#music -> Show the 'Musics' component.\nuser.github.io/#project -> Show the 'Projects' component.</pre>\n</code></pre>\n<p>만약 해쉬 기반 라우팅을 사용하고 싶지 않다면, 404 페이지를 이용한 트릭을 사용하면 된다\n(<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/rafgraph/spa-github-pages\">spa-github-pages</a>). 404 페이지에 스크립트를 삽입하여, 하위 경로에 접속시 주소(<code>/...</code>)를 파라미터 형태(\nex. <code>/?p=/...</code>로 바꾸어 주는 아이디어이다. 저장소에 <code>404.html</code>을 추가하고, 다음과 같은 자바스크립트 코드를 추가한다.</p>\n<p>If you don&#39;t want to use hash-based routing, you can use the 404 page trick\n(<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/rafgraph/spa-github-pages\">spa-github-pages</a>). It is an idea to insert a script into the 404 page\nand change the address (<code>/...</code>)\nto the parameter form (ex. <code>/?p=/...</code>) when accessing the sub-path. Add <code>404.html</code> to the repository, and add the\nfollowing JavaScript code.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-keyword\">var</span> segmentCount = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> l = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>;\n\nl.<span class=\"hljs-title function_\">replace</span>(\n    l.<span class=\"hljs-property\">protocol</span> + <span class=\"hljs-string\">&#x27;//&#x27;</span> + l.<span class=\"hljs-property\">hostname</span> + (l.<span class=\"hljs-property\">port</span> ? <span class=\"hljs-string\">&#x27;:&#x27;</span> + l.<span class=\"hljs-property\">port</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>) +\n    l.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>).<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> + segmentCount).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>) + <span class=\"hljs-string\">&#x27;/?p=/&#x27;</span> +\n    l.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>).<span class=\"hljs-title function_\">slice</span>(segmentCount).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&amp;/g</span>, <span class=\"hljs-string\">&#x27;~and~&#x27;</span>) +\n    (l.<span class=\"hljs-property\">search</span> ? <span class=\"hljs-string\">&#x27;&amp;q=&#x27;</span> + l.<span class=\"hljs-property\">search</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&amp;/g</span>, <span class=\"hljs-string\">&#x27;~and~&#x27;</span>) : <span class=\"hljs-string\">&#x27;&#x27;</span>) +\n    l.<span class=\"hljs-property\">hash</span>\n);</span>\n</code></pre>\n<p>이 때 웹사이트의 기본 주소가 <code>.../github.io</code> 형태이면 <code>segmentCount = 0</code>,\n<code>.../github.io/xxx</code> 형태이면 <code>segmentCount = 1</code>로 설정하면 된다.</p>\n<p>If the base address of the website is in the form of <code>.../github.io</code>, set <code>segmentCount = 0</code>. If the base address of the\nwebsite is in the form of <code>.../github.io/xxx</code>, set <code>segmentCount = 1</code>.</p>\n<p>그리고 <code>index.html</code>에 다음과 같은 자바스크립트 코드를 추가한다.</p>\n<p>And add the following JavaScript code in <code>index.html</code>.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\">(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">l</span>) {\n    <span class=\"hljs-keyword\">if</span> (l.<span class=\"hljs-property\">search</span>) {\n        <span class=\"hljs-keyword\">var</span> q = {};\n\n        l.<span class=\"hljs-property\">search</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&amp;&#x27;</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v</span>) {\n            <span class=\"hljs-keyword\">var</span> a = v.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>);\n            q[a[<span class=\"hljs-number\">0</span>]] = a.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/~and~/g</span>, <span class=\"hljs-string\">&#x27;&amp;&#x27;</span>);\n        });\n\n        <span class=\"hljs-keyword\">if</span> (q.<span class=\"hljs-property\">p</span> !== <span class=\"hljs-literal\">undefined</span>) {\n            <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">history</span>.<span class=\"hljs-title function_\">replaceState</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>,\n                l.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>) + (q.<span class=\"hljs-property\">p</span> || <span class=\"hljs-string\">&#x27;&#x27;</span>) +\n                (q.<span class=\"hljs-property\">q</span> ? (<span class=\"hljs-string\">&#x27;?&#x27;</span> + q.<span class=\"hljs-property\">q</span>) : <span class=\"hljs-string\">&#x27;&#x27;</span>) +\n                l.<span class=\"hljs-property\">hash</span>\n            );\n        }\n    }\n}(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>))</span>\n</code></pre>\n<p>이 방법을 쓰면 깃허브 페이지에서도 다음과 같은 라우팅이 가능해진다. 다만 이 방법을 사용하면 웹사이트의\n<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://ko.wikipedia.org/wiki/%EA%B2%80%EC%83%89_%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94\">검색 엔진 최적화</a>\n가 잘 되지 않을 수 있다.</p>\n<p>Using this method, routing like the following becomes possible on the GitHub page. However, if you use this method, the\n<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://en.wikipedia.org/wiki/search_engine_optimization\">Search Engine Optimization</a>\nof the website may not work well.</p>\n<pre><code><pre class=\"hljs\">Webpage: user.github.io\n\nuser.github.io/about -> Show the 'About' component.\nuser.github.io/music -> Show the 'Musics' component.\nuser.github.io/project -> Show the 'Projects' component.</pre>\n</code></pre>\n"}},"__N_SSG":true}