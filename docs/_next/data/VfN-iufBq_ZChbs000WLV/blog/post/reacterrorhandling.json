{"pageProps":{"output":{"key":"reacterrorhandling","title":"Error handling in React.js","time":1609200000000,"category":"Computer","content":"<p><a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://reactrouter.com/\">리액트 라우터</a>를 사용할 때, 만약 웹페이지 내부에서 예외가 발생하면 라우팅이 정상적으로 작동하지 않는 경우가 있다. 라우팅을 방해하지 않으면서 예외가 콘솔에 출력되게\n하려면, 에러를 처리하는 컴포넌트를 만들어서 각 경로(route)에 해당하는 컴포넌트를 덮어주면 된다.</p>\n<p>When using <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://reactrouter.com/\">React Router</a>, routing may not work properly if an exception occurs inside a web\npage. If you want the exceptions to be printed on the console without interfering routing, you can create an error\nhandler and wrap the components corresponding to each route.</p>\n<pre><code class=\"language-jsx\"><span class=\"hljs\">{<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/menu&#x27;</span>, <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MenuPage</span>/&gt;</span></span>}\n=&gt; {<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/menu&#x27;</span>, <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorHandler</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MenuPage</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ErrorHandler</span>&gt;</span></span>}</span>\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://reactjs.org/\">리액트</a>에서 에러 핸들러는 다음과 같이 만들면 된다.\n(<a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://www.typescriptlang.org/\">타입스크립트</a>로 작성하였다.)</p>\n<p>In <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://reactjs.org/\">React</a>, you can create an error handler like this:\n(The code is written in <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://www.typescriptlang.org/\">TypeScript</a>.)</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ErrorInfo</span>, <span class=\"hljs-title class_\">ReactNode</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span>&lt;{ <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">ReactNode</span> }&gt; {\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">{children = <span class=\"hljs-literal\">null</span>}</span>) {\n        <span class=\"hljs-variable language_\">super</span>({children});\n    }\n\n    <span class=\"hljs-title function_\">componentDidCatch</span>(<span class=\"hljs-params\">error: <span class=\"hljs-built_in\">Error</span>, errorInfo: ErrorInfo</span>) {\n        <span class=\"hljs-comment\">// Print the exception.</span>\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error?.<span class=\"hljs-title function_\">toString</span>());\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(errorInfo?.<span class=\"hljs-property\">componentStack</span>);\n    }\n\n    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-comment\">// Render the component.</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">children</span>;\n    }\n}</span>\n</code></pre>\n<p>에러 발생시에 에러 페이지 등 다른 컴포넌트를 렌더링하고 싶다면, 아래와 같이 하면 된다.</p>\n<p>If you want to render other components such as error pages when an error occurs, you can do as follows.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">ErrorInfo</span>, <span class=\"hljs-title class_\">ReactNode</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span>&lt;{ <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">ReactNode</span> }, { <span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-built_in\">boolean</span> }&gt; {\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">{children = <span class=\"hljs-literal\">null</span>}</span>) {\n        <span class=\"hljs-variable language_\">super</span>({children});\n        <span class=\"hljs-comment\">// hasError = true when we have an exception.</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">false</span>};\n    }\n\n    <span class=\"hljs-title function_\">componentDidCatch</span>(<span class=\"hljs-params\">error: <span class=\"hljs-built_in\">Error</span>, errorInfo: ErrorInfo</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error?.<span class=\"hljs-title function_\">toString</span>());\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(errorInfo?.<span class=\"hljs-property\">componentStack</span>);\n        });\n    }\n\n    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-comment\">// If we have an exception, render &lt;ErrorPage/&gt; instead.</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">hasError</span> ? <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorPage</span>/&gt;</span></span> : <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">children</span>;\n    }\n}</span>\n</code></pre>\n"}},"__N_SSG":true}